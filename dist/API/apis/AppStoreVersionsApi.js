"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStoreVersionsApi = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class AppStoreVersionsApi extends runtime.BaseAPI {
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppClips) {
                queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
                queryParameters['fields[appClipAppStoreReviewDetails]'] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
                queryParameters['fields[appClipDefaultExperienceLocalizations]'] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppClipDefaultExperienceLocalizations !== undefined) {
                queryParameters['limit[appClipDefaultExperienceLocalizations]'] = requestParameters.limitAppClipDefaultExperienceLocalizations;
            }
            if (requestParameters.include) {
                queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppClipDefaultExperienceResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelationship.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
            }
            if (requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === null || requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === undefined) {
                throw new runtime.RequiredError('appStoreVersionAppClipDefaultExperienceLinkageRequest', 'Required parameter requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON)(requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewAttachments) {
                queryParameters['fields[appStoreReviewAttachments]'] = requestParameters.fieldsAppStoreReviewAttachments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreReviewAttachments !== undefined) {
                queryParameters['limit[appStoreReviewAttachments]'] = requestParameters.limitAppStoreReviewAttachments;
            }
            if (requestParameters.include) {
                queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreReviewDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelated.');
            }
            const queryParameters = {};
            if (requestParameters.filterState) {
                queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
                queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
                queryParameters['limit[appStoreVersionExperimentTreatments]'] = requestParameters.limitAppStoreVersionExperimentTreatments;
            }
            if (requestParameters.include) {
                queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionExperiments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionExperimentsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionPhasedReleaseResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelationship.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionBuildLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
            }
            if (requestParameters.appStoreVersionBuildLinkageRequest === null || requestParameters.appStoreVersionBuildLinkageRequest === undefined) {
                throw new runtime.RequiredError('appStoreVersionBuildLinkageRequest', 'Required parameter requestParameters.appStoreVersionBuildLinkageRequest was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionBuildLinkageRequestToJSON)(requestParameters.appStoreVersionBuildLinkageRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsBuildUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appStoreVersionCreateRequest === null || requestParameters.appStoreVersionCreateRequest === undefined) {
                throw new runtime.RequiredError('appStoreVersionCreateRequest', 'Required parameter requestParameters.appStoreVersionCreateRequest was null or undefined when calling appStoreVersionsCreateInstance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionCreateRequestToJSON)(requestParameters.appStoreVersionCreateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsCustomerReviewsGetToManyRelated.');
            }
            const queryParameters = {};
            if (requestParameters.filterRating) {
                queryParameters['filter[rating]'] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterTerritory) {
                queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.existsPublishedResponse !== undefined) {
                queryParameters['exists[publishedResponse]'] = requestParameters.existsPublishedResponse;
            }
            if (requestParameters.sort) {
                queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviewResponses) {
                queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerReviewsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsCustomerReviewsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsDeleteInstance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsGetInstance.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
                queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
            }
            if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
                queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsRoutingAppCoverageGetToOneRelated.');
            }
            const queryParameters = {};
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/routingAppCoverage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoutingAppCoverageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsUpdateInstance.');
            }
            if (requestParameters.appStoreVersionUpdateRequest === null || requestParameters.appStoreVersionUpdateRequest === undefined) {
                throw new runtime.RequiredError('appStoreVersionUpdateRequest', 'Required parameter requestParameters.appStoreVersionUpdateRequest was null or undefined when calling appStoreVersionsUpdateInstance.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itcBearerToken", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionUpdateRequestToJSON)(requestParameters.appStoreVersionUpdateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AppStoreVersionsApi = AppStoreVersionsApi;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
//# sourceMappingURL=AppStoreVersionsApi.js.map