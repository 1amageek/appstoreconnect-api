"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiFilesAndFoldersRuleToJSON = exports.CiFilesAndFoldersRuleFromJSONTyped = exports.CiFilesAndFoldersRuleFromJSON = exports.instanceOfCiFilesAndFoldersRule = exports.CiFilesAndFoldersRuleModeEnum = void 0;
const runtime_1 = require("../runtime");
const CiStartConditionFileMatcher_1 = require("./CiStartConditionFileMatcher");
/**
 * @export
 */
exports.CiFilesAndFoldersRuleModeEnum = {
    StartIfAnyFileMatches: 'START_IF_ANY_FILE_MATCHES',
    DoNotStartIfAllFilesMatch: 'DO_NOT_START_IF_ALL_FILES_MATCH'
};
/**
 * Check if a given object implements the CiFilesAndFoldersRule interface.
 */
function instanceOfCiFilesAndFoldersRule(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCiFilesAndFoldersRule = instanceOfCiFilesAndFoldersRule;
function CiFilesAndFoldersRuleFromJSON(json) {
    return CiFilesAndFoldersRuleFromJSONTyped(json, false);
}
exports.CiFilesAndFoldersRuleFromJSON = CiFilesAndFoldersRuleFromJSON;
function CiFilesAndFoldersRuleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'mode': !(0, runtime_1.exists)(json, 'mode') ? undefined : json['mode'],
        'matchers': !(0, runtime_1.exists)(json, 'matchers') ? undefined : (json['matchers'].map(CiStartConditionFileMatcher_1.CiStartConditionFileMatcherFromJSON)),
    };
}
exports.CiFilesAndFoldersRuleFromJSONTyped = CiFilesAndFoldersRuleFromJSONTyped;
function CiFilesAndFoldersRuleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'mode': value.mode,
        'matchers': value.matchers === undefined ? undefined : (value.matchers.map(CiStartConditionFileMatcher_1.CiStartConditionFileMatcherToJSON)),
    };
}
exports.CiFilesAndFoldersRuleToJSON = CiFilesAndFoldersRuleToJSON;
//# sourceMappingURL=CiFilesAndFoldersRule.js.map