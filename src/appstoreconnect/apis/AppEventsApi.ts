/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppEventCreateRequest, AppEventLocalizationsResponse, AppEventResponse, AppEventUpdateRequest, ErrorResponse, } from '../models';
import { AppEventCreateRequestFromJSON, AppEventCreateRequestToJSON, AppEventLocalizationsResponseFromJSON, AppEventLocalizationsResponseToJSON, AppEventResponseFromJSON, AppEventResponseToJSON, AppEventUpdateRequestFromJSON, AppEventUpdateRequestToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, } from '../models';
export interface AppEventsCreateInstanceRequest {
    appEventCreateRequest: AppEventCreateRequest;
}
export interface AppEventsDeleteInstanceRequest {
    id: string;
}
export interface AppEventsGetInstanceRequest {
    id: string;
    fieldsAppEvents?: Array<AppEventsGetInstanceFieldsAppEventsEnum>;
    include?: Array<AppEventsGetInstanceIncludeEnum>;
    fieldsAppEventLocalizations?: Array<AppEventsGetInstanceFieldsAppEventLocalizationsEnum>;
    limitLocalizations?: number;
}
export interface AppEventsLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsAppEventScreenshots?: Array<AppEventsLocalizationsGetToManyRelatedFieldsAppEventScreenshotsEnum>;
    fieldsAppEventVideoClips?: Array<AppEventsLocalizationsGetToManyRelatedFieldsAppEventVideoClipsEnum>;
    fieldsAppEventLocalizations?: Array<AppEventsLocalizationsGetToManyRelatedFieldsAppEventLocalizationsEnum>;
    fieldsAppEvents?: Array<AppEventsLocalizationsGetToManyRelatedFieldsAppEventsEnum>;
    limit?: number;
    limitAppEventScreenshots?: number;
    limitAppEventVideoClips?: number;
    include?: Array<AppEventsLocalizationsGetToManyRelatedIncludeEnum>;
}
export interface AppEventsUpdateInstanceRequest {
    id: string;
    appEventUpdateRequest: AppEventUpdateRequest;
}
/**
 *
 */
export class AppEventsApi extends runtime.BaseAPI {
    /**
     */
    async appEventsCreateInstanceRaw(requestParameters: AppEventsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventResponse>> {
        if (requestParameters.appEventCreateRequest === null || requestParameters.appEventCreateRequest === undefined) {
            throw new runtime.RequiredError('appEventCreateRequest', 'Required parameter requestParameters.appEventCreateRequest was null or undefined when calling appEventsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEvents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppEventCreateRequestToJSON(requestParameters.appEventCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventResponseFromJSON(jsonValue));
    }
    /**
     */
    async appEventsCreateInstance(requestParameters: AppEventsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventResponse> {
        const response = await this.appEventsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appEventsDeleteInstanceRaw(requestParameters: AppEventsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appEventsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEvents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appEventsDeleteInstance(requestParameters: AppEventsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appEventsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appEventsGetInstanceRaw(requestParameters: AppEventsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appEventsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEventLocalizations) {
            queryParameters['fields[appEventLocalizations]'] = requestParameters.fieldsAppEventLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEvents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventResponseFromJSON(jsonValue));
    }
    /**
     */
    async appEventsGetInstance(requestParameters: AppEventsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventResponse> {
        const response = await this.appEventsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appEventsLocalizationsGetToManyRelatedRaw(requestParameters: AppEventsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appEventsLocalizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppEventScreenshots) {
            queryParameters['fields[appEventScreenshots]'] = requestParameters.fieldsAppEventScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEventVideoClips) {
            queryParameters['fields[appEventVideoClips]'] = requestParameters.fieldsAppEventVideoClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEventLocalizations) {
            queryParameters['fields[appEventLocalizations]'] = requestParameters.fieldsAppEventLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppEventScreenshots !== undefined) {
            queryParameters['limit[appEventScreenshots]'] = requestParameters.limitAppEventScreenshots;
        }
        if (requestParameters.limitAppEventVideoClips !== undefined) {
            queryParameters['limit[appEventVideoClips]'] = requestParameters.limitAppEventVideoClips;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEvents/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventLocalizationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appEventsLocalizationsGetToManyRelated(requestParameters: AppEventsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventLocalizationsResponse> {
        const response = await this.appEventsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appEventsUpdateInstanceRaw(requestParameters: AppEventsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appEventsUpdateInstance.');
        }
        if (requestParameters.appEventUpdateRequest === null || requestParameters.appEventUpdateRequest === undefined) {
            throw new runtime.RequiredError('appEventUpdateRequest', 'Required parameter requestParameters.appEventUpdateRequest was null or undefined when calling appEventsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEvents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppEventUpdateRequestToJSON(requestParameters.appEventUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventResponseFromJSON(jsonValue));
    }
    /**
     */
    async appEventsUpdateInstance(requestParameters: AppEventsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventResponse> {
        const response = await this.appEventsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type AppEventsGetInstanceFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type AppEventsGetInstanceIncludeEnum = 'localizations';;
/**
 * @export
 */
export type AppEventsGetInstanceFieldsAppEventLocalizationsEnum = 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips' | 'locale' | 'longDescription' | 'name' | 'shortDescription';;
/**
 * @export
 */
export type AppEventsLocalizationsGetToManyRelatedFieldsAppEventScreenshotsEnum = 'appEventAssetType' | 'appEventLocalization' | 'assetDeliveryState' | 'assetToken' | 'fileName' | 'fileSize' | 'imageAsset' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppEventsLocalizationsGetToManyRelatedFieldsAppEventVideoClipsEnum = 'appEventAssetType' | 'appEventLocalization' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'previewFrameTimeCode' | 'previewImage' | 'uploadOperations' | 'uploaded' | 'videoUrl';;
/**
 * @export
 */
export type AppEventsLocalizationsGetToManyRelatedFieldsAppEventLocalizationsEnum = 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips' | 'locale' | 'longDescription' | 'name' | 'shortDescription';;
/**
 * @export
 */
export type AppEventsLocalizationsGetToManyRelatedFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type AppEventsLocalizationsGetToManyRelatedIncludeEnum = 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips';;
