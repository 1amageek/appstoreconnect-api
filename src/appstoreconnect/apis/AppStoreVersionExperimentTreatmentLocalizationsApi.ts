/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppPreviewSetsResponse, AppScreenshotSetsResponse, AppStoreVersionExperimentTreatmentLocalizationCreateRequest, AppStoreVersionExperimentTreatmentLocalizationResponse, ErrorResponse, } from '../models';
import { AppPreviewSetsResponseFromJSON, AppPreviewSetsResponseToJSON, AppScreenshotSetsResponseFromJSON, AppScreenshotSetsResponseToJSON, AppStoreVersionExperimentTreatmentLocalizationCreateRequestFromJSON, AppStoreVersionExperimentTreatmentLocalizationCreateRequestToJSON, AppStoreVersionExperimentTreatmentLocalizationResponseFromJSON, AppStoreVersionExperimentTreatmentLocalizationResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, } from '../models';
export interface AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
    id: string;
    filterPreviewType?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFilterPreviewTypeEnum>;
    filterAppCustomProductPageLocalization?: Array<string>;
    filterAppStoreVersionLocalization?: Array<string>;
    fieldsAppCustomProductPageLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppCustomProductPageLocalizationsEnum>;
    fieldsAppStoreVersionExperimentTreatmentLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum>;
    fieldsAppPreviews?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppPreviewsEnum>;
    fieldsAppPreviewSets?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppPreviewSetsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    limit?: number;
    limitAppPreviews?: number;
    include?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedIncludeEnum>;
}
export interface AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
    id: string;
    filterScreenshotDisplayType?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFilterScreenshotDisplayTypeEnum>;
    filterAppCustomProductPageLocalization?: Array<string>;
    filterAppStoreVersionLocalization?: Array<string>;
    fieldsAppScreenshotSets?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppScreenshotSetsEnum>;
    fieldsAppCustomProductPageLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppCustomProductPageLocalizationsEnum>;
    fieldsAppStoreVersionExperimentTreatmentLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum>;
    fieldsAppScreenshots?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppScreenshotsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    limit?: number;
    limitAppScreenshots?: number;
    include?: Array<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedIncludeEnum>;
}
export interface AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest {
    appStoreVersionExperimentTreatmentLocalizationCreateRequest: AppStoreVersionExperimentTreatmentLocalizationCreateRequest;
}
export interface AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest {
    id: string;
}
export interface AppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
    id: string;
    fieldsAppStoreVersionExperimentTreatmentLocalizations?: Array<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum>;
    include?: Array<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceIncludeEnum>;
    fieldsAppScreenshotSets?: Array<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppScreenshotSetsEnum>;
    fieldsAppPreviewSets?: Array<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppPreviewSetsEnum>;
    limitAppPreviewSets?: number;
    limitAppScreenshotSets?: number;
}
/**
 *
 */
export class AppStoreVersionExperimentTreatmentLocalizationsApi extends runtime.BaseAPI {
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRaw(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreviewSetsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterPreviewType) {
            queryParameters['filter[previewType]'] = requestParameters.filterPreviewType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppCustomProductPageLocalization) {
            queryParameters['filter[appCustomProductPageLocalization]'] = requestParameters.filterAppCustomProductPageLocalization.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppStoreVersionLocalization) {
            queryParameters['filter[appStoreVersionLocalization]'] = requestParameters.filterAppStoreVersionLocalization.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPageLocalizations) {
            queryParameters['fields[appCustomProductPageLocalizations]'] = requestParameters.fieldsAppCustomProductPageLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations) {
            queryParameters['fields[appStoreVersionExperimentTreatmentLocalizations]'] = requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreviews) {
            queryParameters['fields[appPreviews]'] = requestParameters.fieldsAppPreviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreviewSets) {
            queryParameters['fields[appPreviewSets]'] = requestParameters.fieldsAppPreviewSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppPreviews !== undefined) {
            queryParameters['limit[appPreviews]'] = requestParameters.limitAppPreviews;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreviewSetsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreviewSetsResponse> {
        const response = await this.appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRaw(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppScreenshotSetsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterScreenshotDisplayType) {
            queryParameters['filter[screenshotDisplayType]'] = requestParameters.filterScreenshotDisplayType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppCustomProductPageLocalization) {
            queryParameters['filter[appCustomProductPageLocalization]'] = requestParameters.filterAppCustomProductPageLocalization.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppStoreVersionLocalization) {
            queryParameters['filter[appStoreVersionLocalization]'] = requestParameters.filterAppStoreVersionLocalization.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppScreenshotSets) {
            queryParameters['fields[appScreenshotSets]'] = requestParameters.fieldsAppScreenshotSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPageLocalizations) {
            queryParameters['fields[appCustomProductPageLocalizations]'] = requestParameters.fieldsAppCustomProductPageLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations) {
            queryParameters['fields[appStoreVersionExperimentTreatmentLocalizations]'] = requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppScreenshots) {
            queryParameters['fields[appScreenshots]'] = requestParameters.fieldsAppScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppScreenshots !== undefined) {
            queryParameters['limit[appScreenshots]'] = requestParameters.limitAppScreenshots;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppScreenshotSetsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppScreenshotSetsResponse> {
        const response = await this.appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsCreateInstanceRaw(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentTreatmentLocalizationResponse>> {
        if (requestParameters.appStoreVersionExperimentTreatmentLocalizationCreateRequest === null || requestParameters.appStoreVersionExperimentTreatmentLocalizationCreateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionExperimentTreatmentLocalizationCreateRequest', 'Required parameter requestParameters.appStoreVersionExperimentTreatmentLocalizationCreateRequest was null or undefined when calling appStoreVersionExperimentTreatmentLocalizationsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperimentTreatmentLocalizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionExperimentTreatmentLocalizationCreateRequestToJSON(requestParameters.appStoreVersionExperimentTreatmentLocalizationCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentTreatmentLocalizationResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsCreateInstance(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        const response = await this.appStoreVersionExperimentTreatmentLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRaw(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentTreatmentLocalizationsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperimentTreatmentLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsDeleteInstance(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsGetInstanceRaw(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentTreatmentLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionExperimentTreatmentLocalizationsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations) {
            queryParameters['fields[appStoreVersionExperimentTreatmentLocalizations]'] = requestParameters.fieldsAppStoreVersionExperimentTreatmentLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppScreenshotSets) {
            queryParameters['fields[appScreenshotSets]'] = requestParameters.fieldsAppScreenshotSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreviewSets) {
            queryParameters['fields[appPreviewSets]'] = requestParameters.fieldsAppPreviewSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppPreviewSets !== undefined) {
            queryParameters['limit[appPreviewSets]'] = requestParameters.limitAppPreviewSets;
        }
        if (requestParameters.limitAppScreenshotSets !== undefined) {
            queryParameters['limit[appScreenshotSets]'] = requestParameters.limitAppScreenshotSets;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionExperimentTreatmentLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentTreatmentLocalizationResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionExperimentTreatmentLocalizationsGetInstance(requestParameters: AppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        const response = await this.appStoreVersionExperimentTreatmentLocalizationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFilterPreviewTypeEnum = 'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppCustomProductPageLocalizationsEnum = 'appCustomProductPageVersion' | 'appPreviewSets' | 'appScreenshotSets' | 'locale' | 'promotionalText';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersionExperimentTreatment' | 'locale';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppPreviewsEnum = 'appPreviewSet' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'mimeType' | 'previewFrameTimeCode' | 'previewImage' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded' | 'videoUrl';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppPreviewSetsEnum = 'appCustomProductPageLocalization' | 'appPreviews' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization' | 'previewType';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedIncludeEnum = 'appCustomProductPageLocalization' | 'appPreviews' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFilterScreenshotDisplayTypeEnum = 'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppScreenshotSetsEnum = 'appCustomProductPageLocalization' | 'appScreenshots' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization' | 'screenshotDisplayType';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppCustomProductPageLocalizationsEnum = 'appCustomProductPageVersion' | 'appPreviewSets' | 'appScreenshotSets' | 'locale' | 'promotionalText';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersionExperimentTreatment' | 'locale';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppScreenshotsEnum = 'appScreenshotSet' | 'assetDeliveryState' | 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedIncludeEnum = 'appCustomProductPageLocalization' | 'appScreenshots' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppStoreVersionExperimentTreatmentLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersionExperimentTreatment' | 'locale';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceIncludeEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersionExperimentTreatment';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppScreenshotSetsEnum = 'appCustomProductPageLocalization' | 'appScreenshots' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization' | 'screenshotDisplayType';;
/**
 * @export
 */
export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceFieldsAppPreviewSetsEnum = 'appCustomProductPageLocalization' | 'appPreviews' | 'appStoreVersionExperimentTreatmentLocalization' | 'appStoreVersionLocalization' | 'previewType';;
