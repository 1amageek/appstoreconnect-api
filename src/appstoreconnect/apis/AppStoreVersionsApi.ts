/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppClipDefaultExperienceResponse, AppStoreReviewDetailResponse, AppStoreVersionAppClipDefaultExperienceLinkageRequest, AppStoreVersionAppClipDefaultExperienceLinkageResponse, AppStoreVersionBuildLinkageRequest, AppStoreVersionBuildLinkageResponse, AppStoreVersionCreateRequest, AppStoreVersionExperimentsResponse, AppStoreVersionLocalizationsResponse, AppStoreVersionPhasedReleaseResponse, AppStoreVersionResponse, AppStoreVersionUpdateRequest, BuildResponse, CustomerReviewsResponse, ErrorResponse, RoutingAppCoverageResponse, } from '../models';
import { AppClipDefaultExperienceResponseFromJSON, AppClipDefaultExperienceResponseToJSON, AppStoreReviewDetailResponseFromJSON, AppStoreReviewDetailResponseToJSON, AppStoreVersionAppClipDefaultExperienceLinkageRequestFromJSON, AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON, AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON, AppStoreVersionAppClipDefaultExperienceLinkageResponseToJSON, AppStoreVersionBuildLinkageRequestFromJSON, AppStoreVersionBuildLinkageRequestToJSON, AppStoreVersionBuildLinkageResponseFromJSON, AppStoreVersionBuildLinkageResponseToJSON, AppStoreVersionCreateRequestFromJSON, AppStoreVersionCreateRequestToJSON, AppStoreVersionExperimentsResponseFromJSON, AppStoreVersionExperimentsResponseToJSON, AppStoreVersionLocalizationsResponseFromJSON, AppStoreVersionLocalizationsResponseToJSON, AppStoreVersionPhasedReleaseResponseFromJSON, AppStoreVersionPhasedReleaseResponseToJSON, AppStoreVersionResponseFromJSON, AppStoreVersionResponseToJSON, AppStoreVersionUpdateRequestFromJSON, AppStoreVersionUpdateRequestToJSON, BuildResponseFromJSON, BuildResponseToJSON, CustomerReviewsResponseFromJSON, CustomerReviewsResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, RoutingAppCoverageResponseFromJSON, RoutingAppCoverageResponseToJSON, } from '../models';
export interface AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
    id: string;
    fieldsAppClips?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum>;
    fieldsAppClipAppStoreReviewDetails?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppClipDefaultExperienceLocalizations?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum>;
    limitAppClipDefaultExperienceLocalizations?: number;
    include?: Array<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum>;
}
export interface AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest {
    id: string;
}
export interface AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
    id: string;
    appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest;
}
export interface AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
    id: string;
    fieldsAppStoreReviewDetails?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppStoreReviewAttachments?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum>;
    limitAppStoreReviewAttachments?: number;
    include?: Array<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum>;
}
export interface AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
    id: string;
    filterState?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionExperimentTreatments?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum>;
    fieldsAppStoreVersions?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    limit?: number;
    limitAppStoreVersionExperimentTreatments?: number;
    include?: Array<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum>;
}
export interface AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    limit?: number;
}
export interface AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
    id: string;
    fieldsAppStoreVersionPhasedReleases?: Array<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
}
export interface AppStoreVersionsBuildGetToOneRelatedRequest {
    id: string;
    fieldsBuilds?: Array<AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum>;
}
export interface AppStoreVersionsBuildGetToOneRelationshipRequest {
    id: string;
}
export interface AppStoreVersionsBuildUpdateToOneRelationshipRequest {
    id: string;
    appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest;
}
export interface AppStoreVersionsCreateInstanceRequest {
    appStoreVersionCreateRequest: AppStoreVersionCreateRequest;
}
export interface AppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
    id: string;
    filterRating?: Array<string>;
    filterTerritory?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum>;
    existsPublishedResponse?: boolean;
    sort?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum>;
    fieldsCustomerReviews?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum>;
    fieldsCustomerReviewResponses?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum>;
    limit?: number;
    include?: Array<AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum>;
}
export interface AppStoreVersionsDeleteInstanceRequest {
    id: string;
}
export interface AppStoreVersionsGetInstanceRequest {
    id: string;
    fieldsAppStoreVersions?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum>;
    include?: Array<AppStoreVersionsGetInstanceIncludeEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum>;
    fieldsCustomerReviews?: Array<AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum>;
    fieldsAppStoreReviewDetails?: Array<AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum>;
    fieldsRoutingAppCoverages?: Array<AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<AppStoreVersionsGetInstanceFieldsBuildsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum>;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionLocalizations?: number;
}
export interface AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
    id: string;
    fieldsRoutingAppCoverages?: Array<AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum>;
}
export interface AppStoreVersionsUpdateInstanceRequest {
    id: string;
    appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest;
}
/**
 *
 */
export class AppStoreVersionsApi extends runtime.BaseAPI {
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
            queryParameters['fields[appClipAppStoreReviewDetails]'] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
            queryParameters['fields[appClipDefaultExperienceLocalizations]'] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppClipDefaultExperienceLocalizations !== undefined) {
            queryParameters['limit[appClipDefaultExperienceLocalizations]'] = requestParameters.limitAppClipDefaultExperienceLocalizations;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelated(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceResponse> {
        const response = await this.appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(requestParameters: AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        const response = await this.appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters: AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
        }
        if (requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === null || requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionAppClipDefaultExperienceLinkageRequest', 'Required parameter requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON(requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(requestParameters: AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreReviewDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreReviewAttachments) {
            queryParameters['fields[appStoreReviewAttachments]'] = requestParameters.fieldsAppStoreReviewAttachments.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppStoreReviewAttachments !== undefined) {
            queryParameters['limit[appStoreReviewAttachments]'] = requestParameters.limitAppStoreReviewAttachments;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreReviewDetailResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppStoreReviewDetailGetToOneRelated(requestParameters: AppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreReviewDetailResponse> {
        const response = await this.appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
            queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
            queryParameters['limit[appStoreVersionExperimentTreatments]'] = requestParameters.limitAppStoreVersionExperimentTreatments;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionExperiments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(requestParameters: AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentsResponse> {
        const response = await this.appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionLocalizationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(requestParameters: AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionLocalizationsResponse> {
        const response = await this.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters: AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionPhasedReleaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionPhasedReleaseResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(requestParameters: AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionPhasedReleaseResponse> {
        const response = await this.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsBuildGetToOneRelatedRaw(requestParameters: AppStoreVersionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsBuildGetToOneRelated(requestParameters: AppStoreVersionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters: AppStoreVersionsBuildGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionBuildLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionBuildLinkageResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsBuildGetToOneRelationship(requestParameters: AppStoreVersionsBuildGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionBuildLinkageResponse> {
        const response = await this.appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters: AppStoreVersionsBuildUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
        }
        if (requestParameters.appStoreVersionBuildLinkageRequest === null || requestParameters.appStoreVersionBuildLinkageRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionBuildLinkageRequest', 'Required parameter requestParameters.appStoreVersionBuildLinkageRequest was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionBuildLinkageRequestToJSON(requestParameters.appStoreVersionBuildLinkageRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appStoreVersionsBuildUpdateToOneRelationship(requestParameters: AppStoreVersionsBuildUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appStoreVersionsCreateInstanceRaw(requestParameters: AppStoreVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.appStoreVersionCreateRequest === null || requestParameters.appStoreVersionCreateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionCreateRequest', 'Required parameter requestParameters.appStoreVersionCreateRequest was null or undefined when calling appStoreVersionsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionCreateRequestToJSON(requestParameters.appStoreVersionCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsCreateInstance(requestParameters: AppStoreVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters: AppStoreVersionsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsCustomerReviewsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterRating) {
            queryParameters['filter[rating]'] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.existsPublishedResponse !== undefined) {
            queryParameters['exists[publishedResponse]'] = requestParameters.existsPublishedResponse;
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviewResponses) {
            queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsCustomerReviewsGetToManyRelated(requestParameters: AppStoreVersionsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewsResponse> {
        const response = await this.appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsDeleteInstanceRaw(requestParameters: AppStoreVersionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appStoreVersionsDeleteInstance(requestParameters: AppStoreVersionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appStoreVersionsGetInstanceRaw(requestParameters: AppStoreVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }
        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsGetInstance(requestParameters: AppStoreVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters: AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingAppCoverageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsRoutingAppCoverageGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}/routingAppCoverage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingAppCoverageResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsRoutingAppCoverageGetToOneRelated(requestParameters: AppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingAppCoverageResponse> {
        const response = await this.appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appStoreVersionsUpdateInstanceRaw(requestParameters: AppStoreVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appStoreVersionsUpdateInstance.');
        }
        if (requestParameters.appStoreVersionUpdateRequest === null || requestParameters.appStoreVersionUpdateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionUpdateRequest', 'Required parameter requestParameters.appStoreVersionUpdateRequest was null or undefined when calling appStoreVersionsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionUpdateRequestToJSON(requestParameters.appStoreVersionUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }
    /**
     */
    async appStoreVersionsUpdateInstance(requestParameters: AppStoreVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum = 'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId';;
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = 'appClipDefaultExperience' | 'invocationUrls';;
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = 'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion';;
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = 'appClipDefaultExperience' | 'appClipHeaderImage' | 'locale' | 'subtitle';;
/**
 * @export
 */
export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum = 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'releaseWithAppStoreVersion';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum = 'appStoreReviewAttachments' | 'appStoreVersion' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum = 'appStoreReviewDetail' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum = 'appStoreReviewAttachments' | 'appStoreVersion';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum = 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'endDate' | 'name' | 'reviewRequired' | 'startDate' | 'started' | 'state' | 'trafficProportion';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = 'appIcon' | 'appIconName' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentTreatmentLocalizations' | 'name' | 'promotedDate';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum = 'appStoreVersion' | 'appStoreVersionExperimentTreatments';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew';;
/**
 * @export
 */
export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = 'appStoreVersion' | 'currentDayNumber' | 'phasedReleaseState' | 'startDate' | 'totalPauseDuration';;
/**
 * @export
 */
export type AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = 'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE';;
/**
 * @export
 */
export type AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum = 'createdDate' | '-createdDate' | 'rating' | '-rating';;
/**
 * @export
 */
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = 'body' | 'createdDate' | 'rating' | 'response' | 'reviewerNickname' | 'territory' | 'title';;
/**
 * @export
 */
export type AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = 'lastModifiedDate' | 'responseBody' | 'review' | 'state';;
/**
 * @export
 */
export type AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum = 'response';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceIncludeEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'routingAppCoverage';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum = 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'endDate' | 'name' | 'reviewRequired' | 'startDate' | 'started' | 'state' | 'trafficProportion';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum = 'body' | 'createdDate' | 'rating' | 'response' | 'reviewerNickname' | 'territory' | 'title';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum = 'appStoreReviewAttachments' | 'appStoreVersion' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum = 'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum = 'appStoreVersion' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum = 'appStoreVersion' | 'currentDayNumber' | 'phasedReleaseState' | 'startDate' | 'totalPauseDuration';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew';;
/**
 * @export
 */
export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum = 'appStoreVersion' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
