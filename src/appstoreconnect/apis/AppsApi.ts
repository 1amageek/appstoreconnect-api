/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppAvailabilityResponse, AppBetaTestersLinkagesRequest, AppClipsResponse, AppCustomProductPagesResponse, AppEventsResponse, AppInfosResponse, AppPreOrderResponse, AppPricePointsV3Response, AppPriceScheduleResponse, AppPromotedPurchasesLinkagesRequest, AppPromotedPurchasesLinkagesResponse, AppResponse, AppStoreVersionsResponse, AppUpdateRequest, AppsResponse, BetaAppLocalizationsResponse, BetaAppReviewDetailResponse, BetaGroupsResponse, BetaLicenseAgreementResponse, BuildsResponse, CiProductResponse, CustomerReviewsResponse, EndUserLicenseAgreementResponse, ErrorResponse, GameCenterEnabledVersionsResponse, InAppPurchasesV2Response, PreReleaseVersionsResponse, PromotedPurchasesResponse, ReviewSubmissionsResponse, SubscriptionGracePeriodResponse, SubscriptionGroupsResponse, XcodeMetrics, } from '../models';
import { AppAvailabilityResponseFromJSON, AppAvailabilityResponseToJSON, AppBetaTestersLinkagesRequestFromJSON, AppBetaTestersLinkagesRequestToJSON, AppClipsResponseFromJSON, AppClipsResponseToJSON, AppCustomProductPagesResponseFromJSON, AppCustomProductPagesResponseToJSON, AppEventsResponseFromJSON, AppEventsResponseToJSON, AppInfosResponseFromJSON, AppInfosResponseToJSON, AppPreOrderResponseFromJSON, AppPreOrderResponseToJSON, AppPricePointsV3ResponseFromJSON, AppPricePointsV3ResponseToJSON, AppPriceScheduleResponseFromJSON, AppPriceScheduleResponseToJSON, AppPromotedPurchasesLinkagesRequestFromJSON, AppPromotedPurchasesLinkagesRequestToJSON, AppPromotedPurchasesLinkagesResponseFromJSON, AppPromotedPurchasesLinkagesResponseToJSON, AppResponseFromJSON, AppResponseToJSON, AppStoreVersionsResponseFromJSON, AppStoreVersionsResponseToJSON, AppUpdateRequestFromJSON, AppUpdateRequestToJSON, AppsResponseFromJSON, AppsResponseToJSON, BetaAppLocalizationsResponseFromJSON, BetaAppLocalizationsResponseToJSON, BetaAppReviewDetailResponseFromJSON, BetaAppReviewDetailResponseToJSON, BetaGroupsResponseFromJSON, BetaGroupsResponseToJSON, BetaLicenseAgreementResponseFromJSON, BetaLicenseAgreementResponseToJSON, BuildsResponseFromJSON, BuildsResponseToJSON, CiProductResponseFromJSON, CiProductResponseToJSON, CustomerReviewsResponseFromJSON, CustomerReviewsResponseToJSON, EndUserLicenseAgreementResponseFromJSON, EndUserLicenseAgreementResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, GameCenterEnabledVersionsResponseFromJSON, GameCenterEnabledVersionsResponseToJSON, InAppPurchasesV2ResponseFromJSON, InAppPurchasesV2ResponseToJSON, PreReleaseVersionsResponseFromJSON, PreReleaseVersionsResponseToJSON, PromotedPurchasesResponseFromJSON, PromotedPurchasesResponseToJSON, ReviewSubmissionsResponseFromJSON, ReviewSubmissionsResponseToJSON, SubscriptionGracePeriodResponseFromJSON, SubscriptionGracePeriodResponseToJSON, SubscriptionGroupsResponseFromJSON, SubscriptionGroupsResponseToJSON, XcodeMetricsFromJSON, XcodeMetricsToJSON, } from '../models';
export interface AppsAppAvailabilityGetToOneRelatedRequest {
    id: string;
    fieldsAppAvailabilities?: Array<AppsAppAvailabilityGetToOneRelatedFieldsAppAvailabilitiesEnum>;
    fieldsApps?: Array<AppsAppAvailabilityGetToOneRelatedFieldsAppsEnum>;
    fieldsTerritories?: Array<AppsAppAvailabilityGetToOneRelatedFieldsTerritoriesEnum>;
    limitAvailableTerritories?: number;
    include?: Array<AppsAppAvailabilityGetToOneRelatedIncludeEnum>;
}
export interface AppsAppClipsGetToManyRelatedRequest {
    id: string;
    filterBundleId?: Array<string>;
    fieldsAppClips?: Array<AppsAppClipsGetToManyRelatedFieldsAppClipsEnum>;
    fieldsApps?: Array<AppsAppClipsGetToManyRelatedFieldsAppsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum>;
    limit?: number;
    limitAppClipDefaultExperiences?: number;
    include?: Array<AppsAppClipsGetToManyRelatedIncludeEnum>;
}
export interface AppsAppCustomProductPagesGetToManyRelatedRequest {
    id: string;
    filterVisible?: Array<string>;
    fieldsAppCustomProductPages?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum>;
    fieldsAppCustomProductPageVersions?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum>;
    fieldsApps?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    limitAppCustomProductPageVersions?: number;
    include?: Array<AppsAppCustomProductPagesGetToManyRelatedIncludeEnum>;
}
export interface AppsAppEventsGetToManyRelatedRequest {
    id: string;
    filterEventState?: Array<AppsAppEventsGetToManyRelatedFilterEventStateEnum>;
    filterId?: Array<string>;
    fieldsAppEventLocalizations?: Array<AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum>;
    fieldsAppEvents?: Array<AppsAppEventsGetToManyRelatedFieldsAppEventsEnum>;
    limit?: number;
    limitLocalizations?: number;
    include?: Array<AppsAppEventsGetToManyRelatedIncludeEnum>;
}
export interface AppsAppInfosGetToManyRelatedRequest {
    id: string;
    fieldsAgeRatingDeclarations?: Array<AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppInfos?: Array<AppsAppInfosGetToManyRelatedFieldsAppInfosEnum>;
    fieldsAppInfoLocalizations?: Array<AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum>;
    fieldsAppCategories?: Array<AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum>;
    fieldsApps?: Array<AppsAppInfosGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    limitAppInfoLocalizations?: number;
    include?: Array<AppsAppInfosGetToManyRelatedIncludeEnum>;
}
export interface AppsAppPricePointsGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsAppPricePoints?: Array<AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum>;
    fieldsApps?: Array<AppsAppPricePointsGetToManyRelatedFieldsAppsEnum>;
    fieldsTerritories?: Array<AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<AppsAppPricePointsGetToManyRelatedIncludeEnum>;
}
export interface AppsAppPriceScheduleGetToOneRelatedRequest {
    id: string;
    fieldsAppPrices?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum>;
    fieldsAppPriceSchedules?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum>;
    fieldsApps?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum>;
    fieldsTerritories?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum>;
    limitManualPrices?: number;
    limitAutomaticPrices?: number;
    include?: Array<AppsAppPriceScheduleGetToOneRelatedIncludeEnum>;
}
export interface AppsAppStoreVersionsGetToManyRelatedRequest {
    id: string;
    filterAppStoreState?: Array<AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum>;
    filterPlatform?: Array<AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum>;
    filterVersionString?: Array<string>;
    filterId?: Array<string>;
    fieldsAppStoreVersionExperiments?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAgeRatingDeclarations?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAppStoreReviewDetails?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum>;
    fieldsRoutingAppCoverages?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    limit?: number;
    limitAppStoreVersionLocalizations?: number;
    limitAppStoreVersionExperiments?: number;
    include?: Array<AppsAppStoreVersionsGetToManyRelatedIncludeEnum>;
}
export interface AppsBetaAppLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsBetaAppLocalizations?: Array<AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum>;
    limit?: number;
}
export interface AppsBetaAppReviewDetailGetToOneRelatedRequest {
    id: string;
    fieldsBetaAppReviewDetails?: Array<AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum>;
}
export interface AppsBetaGroupsGetToManyRelatedRequest {
    id: string;
    fieldsBetaGroups?: Array<AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum>;
    limit?: number;
}
export interface AppsBetaLicenseAgreementGetToOneRelatedRequest {
    id: string;
    fieldsBetaLicenseAgreements?: Array<AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum>;
}
export interface AppsBetaTestersDeleteToManyRelationshipRequest {
    id: string;
    appBetaTestersLinkagesRequest: AppBetaTestersLinkagesRequest;
}
export interface AppsBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<AppsBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}
export interface AppsCiProductGetToOneRelatedRequest {
    id: string;
    fieldsCiProducts?: Array<AppsCiProductGetToOneRelatedFieldsCiProductsEnum>;
    fieldsApps?: Array<AppsCiProductGetToOneRelatedFieldsAppsEnum>;
    fieldsScmRepositories?: Array<AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum>;
    fieldsBundleIds?: Array<AppsCiProductGetToOneRelatedFieldsBundleIdsEnum>;
    limitPrimaryRepositories?: number;
    include?: Array<AppsCiProductGetToOneRelatedIncludeEnum>;
}
export interface AppsCustomerReviewsGetToManyRelatedRequest {
    id: string;
    filterRating?: Array<string>;
    filterTerritory?: Array<AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum>;
    existsPublishedResponse?: boolean;
    sort?: Array<AppsCustomerReviewsGetToManyRelatedSortEnum>;
    fieldsCustomerReviews?: Array<AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum>;
    fieldsCustomerReviewResponses?: Array<AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum>;
    limit?: number;
    include?: Array<AppsCustomerReviewsGetToManyRelatedIncludeEnum>;
}
export interface AppsEndUserLicenseAgreementGetToOneRelatedRequest {
    id: string;
    fieldsEndUserLicenseAgreements?: Array<AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum>;
}
export interface AppsGameCenterEnabledVersionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum>;
    filterVersionString?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum>;
    fieldsApps?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    limitCompatibleVersions?: number;
    include?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum>;
}
export interface AppsGetCollectionRequest {
    filterAppStoreVersionsAppStoreState?: Array<AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum>;
    filterAppStoreVersionsPlatform?: Array<AppsGetCollectionFilterAppStoreVersionsPlatformEnum>;
    filterBundleId?: Array<string>;
    filterName?: Array<string>;
    filterSku?: Array<string>;
    filterAppStoreVersions?: Array<string>;
    filterId?: Array<string>;
    existsGameCenterEnabledVersions?: boolean;
    sort?: Array<AppsGetCollectionSortEnum>;
    fieldsApps?: Array<AppsGetCollectionFieldsAppsEnum>;
    limit?: number;
    include?: Array<AppsGetCollectionIncludeEnum>;
    fieldsBetaAppReviewDetails?: Array<AppsGetCollectionFieldsBetaAppReviewDetailsEnum>;
    fieldsAppPriceSchedules?: Array<AppsGetCollectionFieldsAppPriceSchedulesEnum>;
    fieldsCiProducts?: Array<AppsGetCollectionFieldsCiProductsEnum>;
    fieldsReviewSubmissions?: Array<AppsGetCollectionFieldsReviewSubmissionsEnum>;
    fieldsBetaGroups?: Array<AppsGetCollectionFieldsBetaGroupsEnum>;
    fieldsPromotedPurchases?: Array<AppsGetCollectionFieldsPromotedPurchasesEnum>;
    fieldsAppAvailabilities?: Array<AppsGetCollectionFieldsAppAvailabilitiesEnum>;
    fieldsCustomerReviews?: Array<AppsGetCollectionFieldsCustomerReviewsEnum>;
    fieldsAppEvents?: Array<AppsGetCollectionFieldsAppEventsEnum>;
    fieldsBuilds?: Array<AppsGetCollectionFieldsBuildsEnum>;
    fieldsBetaLicenseAgreements?: Array<AppsGetCollectionFieldsBetaLicenseAgreementsEnum>;
    fieldsAppClips?: Array<AppsGetCollectionFieldsAppClipsEnum>;
    fieldsAppInfos?: Array<AppsGetCollectionFieldsAppInfosEnum>;
    fieldsBetaAppLocalizations?: Array<AppsGetCollectionFieldsBetaAppLocalizationsEnum>;
    fieldsAppPricePoints?: Array<AppsGetCollectionFieldsAppPricePointsEnum>;
    fieldsPreReleaseVersions?: Array<AppsGetCollectionFieldsPreReleaseVersionsEnum>;
    fieldsInAppPurchases?: Array<AppsGetCollectionFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<AppsGetCollectionFieldsSubscriptionGroupsEnum>;
    fieldsAppPreOrders?: Array<AppsGetCollectionFieldsAppPreOrdersEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGetCollectionFieldsGameCenterEnabledVersionsEnum>;
    fieldsSubscriptionGracePeriods?: Array<AppsGetCollectionFieldsSubscriptionGracePeriodsEnum>;
    fieldsEndUserLicenseAgreements?: Array<AppsGetCollectionFieldsEndUserLicenseAgreementsEnum>;
    fieldsAppStoreVersions?: Array<AppsGetCollectionFieldsAppStoreVersionsEnum>;
    fieldsAppCustomProductPages?: Array<AppsGetCollectionFieldsAppCustomProductPagesEnum>;
    fieldsPerfPowerMetrics?: Array<AppsGetCollectionFieldsPerfPowerMetricsEnum>;
    limitAppClips?: number;
    limitAppCustomProductPages?: number;
    limitAppEvents?: number;
    limitAppInfos?: number;
    limitAppStoreVersions?: number;
    limitAvailableTerritories?: number;
    limitBetaAppLocalizations?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
    limitGameCenterEnabledVersions?: number;
    limitInAppPurchases?: number;
    limitInAppPurchasesV2?: number;
    limitPreReleaseVersions?: number;
    limitPromotedPurchases?: number;
    limitReviewSubmissions?: number;
    limitSubscriptionGroups?: number;
}
export interface AppsGetInstanceRequest {
    id: string;
    fieldsApps?: Array<AppsGetInstanceFieldsAppsEnum>;
    include?: Array<AppsGetInstanceIncludeEnum>;
    fieldsBetaAppReviewDetails?: Array<AppsGetInstanceFieldsBetaAppReviewDetailsEnum>;
    fieldsAppPriceSchedules?: Array<AppsGetInstanceFieldsAppPriceSchedulesEnum>;
    fieldsCiProducts?: Array<AppsGetInstanceFieldsCiProductsEnum>;
    fieldsReviewSubmissions?: Array<AppsGetInstanceFieldsReviewSubmissionsEnum>;
    fieldsBetaGroups?: Array<AppsGetInstanceFieldsBetaGroupsEnum>;
    fieldsPromotedPurchases?: Array<AppsGetInstanceFieldsPromotedPurchasesEnum>;
    fieldsAppAvailabilities?: Array<AppsGetInstanceFieldsAppAvailabilitiesEnum>;
    fieldsCustomerReviews?: Array<AppsGetInstanceFieldsCustomerReviewsEnum>;
    fieldsAppEvents?: Array<AppsGetInstanceFieldsAppEventsEnum>;
    fieldsBuilds?: Array<AppsGetInstanceFieldsBuildsEnum>;
    fieldsBetaLicenseAgreements?: Array<AppsGetInstanceFieldsBetaLicenseAgreementsEnum>;
    fieldsAppClips?: Array<AppsGetInstanceFieldsAppClipsEnum>;
    fieldsAppInfos?: Array<AppsGetInstanceFieldsAppInfosEnum>;
    fieldsBetaAppLocalizations?: Array<AppsGetInstanceFieldsBetaAppLocalizationsEnum>;
    fieldsAppPricePoints?: Array<AppsGetInstanceFieldsAppPricePointsEnum>;
    fieldsPreReleaseVersions?: Array<AppsGetInstanceFieldsPreReleaseVersionsEnum>;
    fieldsInAppPurchases?: Array<AppsGetInstanceFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<AppsGetInstanceFieldsSubscriptionGroupsEnum>;
    fieldsAppPreOrders?: Array<AppsGetInstanceFieldsAppPreOrdersEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGetInstanceFieldsGameCenterEnabledVersionsEnum>;
    fieldsSubscriptionGracePeriods?: Array<AppsGetInstanceFieldsSubscriptionGracePeriodsEnum>;
    fieldsEndUserLicenseAgreements?: Array<AppsGetInstanceFieldsEndUserLicenseAgreementsEnum>;
    fieldsAppStoreVersions?: Array<AppsGetInstanceFieldsAppStoreVersionsEnum>;
    fieldsAppCustomProductPages?: Array<AppsGetInstanceFieldsAppCustomProductPagesEnum>;
    fieldsPerfPowerMetrics?: Array<AppsGetInstanceFieldsPerfPowerMetricsEnum>;
    limitAppClips?: number;
    limitAppCustomProductPages?: number;
    limitAppEvents?: number;
    limitAppInfos?: number;
    limitAppStoreVersions?: number;
    limitAvailableTerritories?: number;
    limitBetaAppLocalizations?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
    limitGameCenterEnabledVersions?: number;
    limitInAppPurchases?: number;
    limitInAppPurchasesV2?: number;
    limitPreReleaseVersions?: number;
    limitPromotedPurchases?: number;
    limitReviewSubmissions?: number;
    limitSubscriptionGroups?: number;
}
export interface AppsInAppPurchasesV2GetToManyRelatedRequest {
    id: string;
    filterInAppPurchaseType?: Array<AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum>;
    filterName?: Array<string>;
    filterProductId?: Array<string>;
    filterState?: Array<AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum>;
    sort?: Array<AppsInAppPurchasesV2GetToManyRelatedSortEnum>;
    fieldsInAppPurchaseAppStoreReviewScreenshots?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum>;
    fieldsInAppPurchasePricePoints?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePricePointsEnum>;
    fieldsPromotedPurchases?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum>;
    fieldsInAppPurchaseLocalizations?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum>;
    fieldsInAppPurchases?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum>;
    fieldsInAppPurchasePriceSchedules?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum>;
    fieldsInAppPurchaseContents?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum>;
    limit?: number;
    limitInAppPurchaseLocalizations?: number;
    limitPricePoints?: number;
    include?: Array<AppsInAppPurchasesV2GetToManyRelatedIncludeEnum>;
}
export interface AppsPerfPowerMetricsGetToManyRelatedRequest {
    id: string;
    filterDeviceType?: Array<string>;
    filterMetricType?: Array<AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum>;
    filterPlatform?: Array<AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum>;
}
export interface AppsPreOrderGetToOneRelatedRequest {
    id: string;
    fieldsAppPreOrders?: Array<AppsPreOrderGetToOneRelatedFieldsAppPreOrdersEnum>;
}
export interface AppsPreReleaseVersionsGetToManyRelatedRequest {
    id: string;
    fieldsPreReleaseVersions?: Array<AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum>;
    limit?: number;
}
export interface AppsPromotedPurchasesGetToManyRelatedRequest {
    id: string;
    fieldsPromotedPurchases?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum>;
    fieldsSubscriptions?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsInAppPurchases?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum>;
    fieldsPromotedPurchaseImages?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchaseImagesEnum>;
    limit?: number;
    limitPromotionImages?: number;
    include?: Array<AppsPromotedPurchasesGetToManyRelatedIncludeEnum>;
}
export interface AppsPromotedPurchasesGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface AppsPromotedPurchasesReplaceToManyRelationshipRequest {
    id: string;
    appPromotedPurchasesLinkagesRequest: AppPromotedPurchasesLinkagesRequest;
}
export interface AppsReviewSubmissionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum>;
    filterState?: Array<AppsReviewSubmissionsGetToManyRelatedFilterStateEnum>;
    fieldsReviewSubmissionItems?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum>;
    fieldsAppStoreVersions?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum>;
    fieldsReviewSubmissions?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum>;
    limit?: number;
    limitItems?: number;
    include?: Array<AppsReviewSubmissionsGetToManyRelatedIncludeEnum>;
}
export interface AppsSubscriptionGracePeriodGetToOneRelatedRequest {
    id: string;
    fieldsSubscriptionGracePeriods?: Array<AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum>;
}
export interface AppsSubscriptionGroupsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterSubscriptionsState?: Array<AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum>;
    sort?: Array<AppsSubscriptionGroupsGetToManyRelatedSortEnum>;
    fieldsSubscriptions?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionGroups?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum>;
    fieldsSubscriptionGroupLocalizations?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum>;
    limit?: number;
    limitSubscriptions?: number;
    limitSubscriptionGroupLocalizations?: number;
    include?: Array<AppsSubscriptionGroupsGetToManyRelatedIncludeEnum>;
}
export interface AppsUpdateInstanceRequest {
    id: string;
    appUpdateRequest: AppUpdateRequest;
}
/**
 *
 */
export class AppsApi extends runtime.BaseAPI {
    /**
     */
    async appsAppAvailabilityGetToOneRelatedRaw(requestParameters: AppsAppAvailabilityGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppAvailabilityResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppAvailabilityGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppAvailabilities) {
            queryParameters['fields[appAvailabilities]'] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appAvailability`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppAvailabilityResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppAvailabilityGetToOneRelated(requestParameters: AppsAppAvailabilityGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppAvailabilityResponse> {
        const response = await this.appsAppAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppClipsGetToManyRelatedRaw(requestParameters: AppsAppClipsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppClipsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterBundleId) {
            queryParameters['filter[bundleId]'] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppClipDefaultExperiences !== undefined) {
            queryParameters['limit[appClipDefaultExperiences]'] = requestParameters.limitAppClipDefaultExperiences;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appClips`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppClipsGetToManyRelated(requestParameters: AppsAppClipsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipsResponse> {
        const response = await this.appsAppClipsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters: AppsAppCustomProductPagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppCustomProductPagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppCustomProductPagesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterVisible) {
            queryParameters['filter[visible]'] = requestParameters.filterVisible.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPageVersions) {
            queryParameters['fields[appCustomProductPageVersions]'] = requestParameters.fieldsAppCustomProductPageVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppCustomProductPageVersions !== undefined) {
            queryParameters['limit[appCustomProductPageVersions]'] = requestParameters.limitAppCustomProductPageVersions;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appCustomProductPages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppCustomProductPagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppCustomProductPagesGetToManyRelated(requestParameters: AppsAppCustomProductPagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppCustomProductPagesResponse> {
        const response = await this.appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppEventsGetToManyRelatedRaw(requestParameters: AppsAppEventsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppEventsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterEventState) {
            queryParameters['filter[eventState]'] = requestParameters.filterEventState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEventLocalizations) {
            queryParameters['fields[appEventLocalizations]'] = requestParameters.fieldsAppEventLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appEvents`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppEventsGetToManyRelated(requestParameters: AppsAppEventsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventsResponse> {
        const response = await this.appsAppEventsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppInfosGetToManyRelatedRaw(requestParameters: AppsAppInfosGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInfosResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppInfosGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppInfoLocalizations) {
            queryParameters['fields[appInfoLocalizations]'] = requestParameters.fieldsAppInfoLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCategories) {
            queryParameters['fields[appCategories]'] = requestParameters.fieldsAppCategories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppInfoLocalizations !== undefined) {
            queryParameters['limit[appInfoLocalizations]'] = requestParameters.limitAppInfoLocalizations;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appInfos`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppInfosResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppInfosGetToManyRelated(requestParameters: AppsAppInfosGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInfosResponse> {
        const response = await this.appsAppInfosGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppPricePointsGetToManyRelatedRaw(requestParameters: AppsAppPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPricePointsV3Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppPricePointsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appPricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppPricePointsV3ResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppPricePointsGetToManyRelated(requestParameters: AppsAppPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPricePointsV3Response> {
        const response = await this.appsAppPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppPriceScheduleGetToOneRelatedRaw(requestParameters: AppsAppPriceScheduleGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPriceScheduleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppPriceScheduleGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppPrices) {
            queryParameters['fields[appPrices]'] = requestParameters.fieldsAppPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPriceSchedules) {
            queryParameters['fields[appPriceSchedules]'] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitManualPrices !== undefined) {
            queryParameters['limit[manualPrices]'] = requestParameters.limitManualPrices;
        }
        if (requestParameters.limitAutomaticPrices !== undefined) {
            queryParameters['limit[automaticPrices]'] = requestParameters.limitAutomaticPrices;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appPriceSchedule`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppPriceScheduleResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppPriceScheduleGetToOneRelated(requestParameters: AppsAppPriceScheduleGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPriceScheduleResponse> {
        const response = await this.appsAppPriceScheduleGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsAppStoreVersionsGetToManyRelatedRaw(requestParameters: AppsAppStoreVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsAppStoreVersionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterAppStoreState) {
            queryParameters['filter[appStoreState]'] = requestParameters.filterAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterVersionString) {
            queryParameters['filter[versionString]'] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }
        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appStoreVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsAppStoreVersionsGetToManyRelated(requestParameters: AppsAppStoreVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionsResponse> {
        const response = await this.appsAppStoreVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters: AppsBetaAppLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBetaAppLocalizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaAppLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsBetaAppLocalizationsGetToManyRelated(requestParameters: AppsBetaAppLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationsResponse> {
        const response = await this.appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters: AppsBetaAppReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBetaAppReviewDetailGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaAppReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewDetailResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsBetaAppReviewDetailGetToOneRelated(requestParameters: AppsBetaAppReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewDetailResponse> {
        const response = await this.appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsBetaGroupsGetToManyRelatedRaw(requestParameters: AppsBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBetaGroupsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsBetaGroupsGetToManyRelated(requestParameters: AppsBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupsResponse> {
        const response = await this.appsBetaGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters: AppsBetaLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBetaLicenseAgreementGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsBetaLicenseAgreementGetToOneRelated(requestParameters: AppsBetaLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementResponse> {
        const response = await this.appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsBetaTestersDeleteToManyRelationshipRaw(requestParameters: AppsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBetaTestersDeleteToManyRelationship.');
        }
        if (requestParameters.appBetaTestersLinkagesRequest === null || requestParameters.appBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appBetaTestersLinkagesRequest', 'Required parameter requestParameters.appBetaTestersLinkagesRequest was null or undefined when calling appsBetaTestersDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AppBetaTestersLinkagesRequestToJSON(requestParameters.appBetaTestersLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appsBetaTestersDeleteToManyRelationship(requestParameters: AppsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appsBuildsGetToManyRelatedRaw(requestParameters: AppsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsBuildsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsBuildsGetToManyRelated(requestParameters: AppsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsResponse> {
        const response = await this.appsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsCiProductGetToOneRelatedRaw(requestParameters: AppsCiProductGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsCiProductGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBundleIds) {
            queryParameters['fields[bundleIds]'] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/ciProduct`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsCiProductGetToOneRelated(requestParameters: AppsCiProductGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductResponse> {
        const response = await this.appsCiProductGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsCustomerReviewsGetToManyRelatedRaw(requestParameters: AppsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsCustomerReviewsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterRating) {
            queryParameters['filter[rating]'] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.existsPublishedResponse !== undefined) {
            queryParameters['exists[publishedResponse]'] = requestParameters.existsPublishedResponse;
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviewResponses) {
            queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsCustomerReviewsGetToManyRelated(requestParameters: AppsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewsResponse> {
        const response = await this.appsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters: AppsEndUserLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndUserLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsEndUserLicenseAgreementGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/endUserLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => EndUserLicenseAgreementResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsEndUserLicenseAgreementGetToOneRelated(requestParameters: AppsEndUserLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndUserLicenseAgreementResponse> {
        const response = await this.appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters: AppsGameCenterEnabledVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterEnabledVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsGameCenterEnabledVersionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterVersionString) {
            queryParameters['filter[versionString]'] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitCompatibleVersions !== undefined) {
            queryParameters['limit[compatibleVersions]'] = requestParameters.limitCompatibleVersions;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/gameCenterEnabledVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterEnabledVersionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsGameCenterEnabledVersionsGetToManyRelated(requestParameters: AppsGameCenterEnabledVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterEnabledVersionsResponse> {
        const response = await this.appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsGetCollectionRaw(requestParameters: AppsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsResponse>> {
        const queryParameters: any = {};
        if (requestParameters.filterAppStoreVersionsAppStoreState) {
            queryParameters['filter[appStoreVersions.appStoreState]'] = requestParameters.filterAppStoreVersionsAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppStoreVersionsPlatform) {
            queryParameters['filter[appStoreVersions.platform]'] = requestParameters.filterAppStoreVersionsPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterBundleId) {
            queryParameters['filter[bundleId]'] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterSku) {
            queryParameters['filter[sku]'] = requestParameters.filterSku.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterAppStoreVersions) {
            queryParameters['filter[appStoreVersions]'] = requestParameters.filterAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.existsGameCenterEnabledVersions !== undefined) {
            queryParameters['exists[gameCenterEnabledVersions]'] = requestParameters.existsGameCenterEnabledVersions;
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPriceSchedules) {
            queryParameters['fields[appPriceSchedules]'] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppAvailabilities) {
            queryParameters['fields[appAvailabilities]'] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPerfPowerMetrics) {
            queryParameters['fields[perfPowerMetrics]'] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }
        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }
        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }
        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }
        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }
        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }
        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }
        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }
        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }
        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }
        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }
        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }
        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }
        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsGetCollection(requestParameters: AppsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsResponse> {
        const response = await this.appsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsGetInstanceRaw(requestParameters: AppsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPriceSchedules) {
            queryParameters['fields[appPriceSchedules]'] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppAvailabilities) {
            queryParameters['fields[appAvailabilities]'] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPerfPowerMetrics) {
            queryParameters['fields[perfPowerMetrics]'] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }
        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }
        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }
        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }
        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }
        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }
        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }
        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }
        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }
        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }
        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }
        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }
        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }
        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsGetInstance(requestParameters: AppsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.appsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters: AppsInAppPurchasesV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchasesV2Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsInAppPurchasesV2GetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterInAppPurchaseType) {
            queryParameters['filter[inAppPurchaseType]'] = requestParameters.filterInAppPurchaseType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterProductId) {
            queryParameters['filter[productId]'] = requestParameters.filterProductId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots) {
            queryParameters['fields[inAppPurchaseAppStoreReviewScreenshots]'] = requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchasePricePoints) {
            queryParameters['fields[inAppPurchasePricePoints]'] = requestParameters.fieldsInAppPurchasePricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchaseLocalizations) {
            queryParameters['fields[inAppPurchaseLocalizations]'] = requestParameters.fieldsInAppPurchaseLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchasePriceSchedules) {
            queryParameters['fields[inAppPurchasePriceSchedules]'] = requestParameters.fieldsInAppPurchasePriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchaseContents) {
            queryParameters['fields[inAppPurchaseContents]'] = requestParameters.fieldsInAppPurchaseContents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitInAppPurchaseLocalizations !== undefined) {
            queryParameters['limit[inAppPurchaseLocalizations]'] = requestParameters.limitInAppPurchaseLocalizations;
        }
        if (requestParameters.limitPricePoints !== undefined) {
            queryParameters['limit[pricePoints]'] = requestParameters.limitPricePoints;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/inAppPurchasesV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchasesV2ResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsInAppPurchasesV2GetToManyRelated(requestParameters: AppsInAppPurchasesV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchasesV2Response> {
        const response = await this.appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters: AppsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XcodeMetrics>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPerfPowerMetricsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterDeviceType) {
            queryParameters['filter[deviceType]'] = requestParameters.filterDeviceType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterMetricType) {
            queryParameters['filter[metricType]'] = requestParameters.filterMetricType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/perfPowerMetrics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => XcodeMetricsFromJSON(jsonValue));
    }
    /**
     */
    async appsPerfPowerMetricsGetToManyRelated(requestParameters: AppsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XcodeMetrics> {
        const response = await this.appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPreOrderGetToOneRelatedRaw(requestParameters: AppsPreOrderGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPreOrderGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/preOrder`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreOrderResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsPreOrderGetToOneRelated(requestParameters: AppsPreOrderGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreOrderResponse> {
        const response = await this.appsPreOrderGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters: AppsPreReleaseVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreReleaseVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPreReleaseVersionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/preReleaseVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => PreReleaseVersionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsPreReleaseVersionsGetToManyRelated(requestParameters: AppsPreReleaseVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreReleaseVersionsResponse> {
        const response = await this.appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPromotedPurchasesGetToManyRelatedRaw(requestParameters: AppsPromotedPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotedPurchasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchaseImages) {
            queryParameters['fields[promotedPurchaseImages]'] = requestParameters.fieldsPromotedPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitPromotionImages !== undefined) {
            queryParameters['limit[promotionImages]'] = requestParameters.limitPromotionImages;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => PromotedPurchasesResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsPromotedPurchasesGetToManyRelated(requestParameters: AppsPromotedPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotedPurchasesResponse> {
        const response = await this.appsPromotedPurchasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters: AppsPromotedPurchasesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPromotedPurchasesLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppPromotedPurchasesLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsPromotedPurchasesGetToManyRelationship(requestParameters: AppsPromotedPurchasesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPromotedPurchasesLinkagesResponse> {
        const response = await this.appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters: AppsPromotedPurchasesReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.');
        }
        if (requestParameters.appPromotedPurchasesLinkagesRequest === null || requestParameters.appPromotedPurchasesLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appPromotedPurchasesLinkagesRequest', 'Required parameter requestParameters.appPromotedPurchasesLinkagesRequest was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppPromotedPurchasesLinkagesRequestToJSON(requestParameters.appPromotedPurchasesLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appsPromotedPurchasesReplaceToManyRelationship(requestParameters: AppsPromotedPurchasesReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async appsReviewSubmissionsGetToManyRelatedRaw(requestParameters: AppsReviewSubmissionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsReviewSubmissionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsReviewSubmissionItems) {
            queryParameters['fields[reviewSubmissionItems]'] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitItems !== undefined) {
            queryParameters['limit[items]'] = requestParameters.limitItems;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/reviewSubmissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsReviewSubmissionsGetToManyRelated(requestParameters: AppsReviewSubmissionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionsResponse> {
        const response = await this.appsReviewSubmissionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters: AppsSubscriptionGracePeriodGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGracePeriodResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGracePeriodGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/subscriptionGracePeriod`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGracePeriodResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsSubscriptionGracePeriodGetToOneRelated(requestParameters: AppsSubscriptionGracePeriodGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGracePeriodResponse> {
        const response = await this.appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters: AppsSubscriptionGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGroupsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterSubscriptionsState) {
            queryParameters['filter[subscriptions.state]'] = requestParameters.filterSubscriptionsState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroupLocalizations) {
            queryParameters['fields[subscriptionGroupLocalizations]'] = requestParameters.fieldsSubscriptionGroupLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitSubscriptions !== undefined) {
            queryParameters['limit[subscriptions]'] = requestParameters.limitSubscriptions;
        }
        if (requestParameters.limitSubscriptionGroupLocalizations !== undefined) {
            queryParameters['limit[subscriptionGroupLocalizations]'] = requestParameters.limitSubscriptionGroupLocalizations;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/subscriptionGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupsResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsSubscriptionGroupsGetToManyRelated(requestParameters: AppsSubscriptionGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupsResponse> {
        const response = await this.appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async appsUpdateInstanceRaw(requestParameters: AppsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling appsUpdateInstance.');
        }
        if (requestParameters.appUpdateRequest === null || requestParameters.appUpdateRequest === undefined) {
            throw new runtime.RequiredError('appUpdateRequest', 'Required parameter requestParameters.appUpdateRequest was null or undefined when calling appsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppUpdateRequestToJSON(requestParameters.appUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }
    /**
     */
    async appsUpdateInstance(requestParameters: AppsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.appsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type AppsAppAvailabilityGetToOneRelatedFieldsAppAvailabilitiesEnum = 'app' | 'availableInNewTerritories' | 'availableTerritories';;
/**
 * @export
 */
export type AppsAppAvailabilityGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppAvailabilityGetToOneRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type AppsAppAvailabilityGetToOneRelatedIncludeEnum = 'app' | 'availableTerritories';;
/**
 * @export
 */
export type AppsAppClipsGetToManyRelatedFieldsAppClipsEnum = 'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId';;
/**
 * @export
 */
export type AppsAppClipsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = 'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion';;
/**
 * @export
 */
export type AppsAppClipsGetToManyRelatedIncludeEnum = 'app' | 'appClipDefaultExperiences';;
/**
 * @export
 */
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum = 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible';;
/**
 * @export
 */
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = 'appCustomProductPage' | 'appCustomProductPageLocalizations' | 'state' | 'version';;
/**
 * @export
 */
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppCustomProductPagesGetToManyRelatedIncludeEnum = 'app' | 'appCustomProductPageVersions';;
/**
 * @export
 */
export type AppsAppEventsGetToManyRelatedFilterEventStateEnum = 'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED';;
/**
 * @export
 */
export type AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum = 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips' | 'locale' | 'longDescription' | 'name' | 'shortDescription';;
/**
 * @export
 */
export type AppsAppEventsGetToManyRelatedFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type AppsAppEventsGetToManyRelatedIncludeEnum = 'localizations';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum = 'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gambling' | 'gamblingAndContests' | 'gamblingSimulated' | 'horrorOrFearThemes' | 'kidsAgeBand' | 'matureOrSuggestiveThemes' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'seventeenPlus' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealistic' | 'violenceRealisticProlongedGraphicOrSadistic';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedFieldsAppInfosEnum = 'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum = 'appInfo' | 'locale' | 'name' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'privacyPolicyUrl' | 'subtitle';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum = 'parent' | 'platforms' | 'subcategories';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppInfosGetToManyRelatedIncludeEnum = 'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo';;
/**
 * @export
 */
export type AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum = 'app' | 'customerPrice' | 'equalizations' | 'proceeds' | 'territory';;
/**
 * @export
 */
export type AppsAppPricePointsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type AppsAppPricePointsGetToManyRelatedIncludeEnum = 'app' | 'territory';;
/**
 * @export
 */
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum = 'appPricePoint' | 'endDate' | 'manual' | 'startDate' | 'territory';;
/**
 * @export
 */
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum = 'app' | 'automaticPrices' | 'baseTerritory' | 'manualPrices';;
/**
 * @export
 */
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type AppsAppPriceScheduleGetToOneRelatedIncludeEnum = 'app' | 'automaticPrices' | 'baseTerritory' | 'manualPrices';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum = 'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum = 'IOS' | 'MAC_OS' | 'TV_OS';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'endDate' | 'name' | 'reviewRequired' | 'startDate' | 'started' | 'state' | 'trafficProportion';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum = 'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gambling' | 'gamblingAndContests' | 'gamblingSimulated' | 'horrorOrFearThemes' | 'kidsAgeBand' | 'matureOrSuggestiveThemes' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'seventeenPlus' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealistic' | 'violenceRealisticProlongedGraphicOrSadistic';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum = 'appStoreVersion';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum = 'appStoreReviewAttachments' | 'appStoreVersion' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum = 'appStoreVersion' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = 'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum = 'appStoreVersion' | 'currentDayNumber' | 'phasedReleaseState' | 'startDate' | 'totalPauseDuration';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = 'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew';;
/**
 * @export
 */
export type AppsAppStoreVersionsGetToManyRelatedIncludeEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'routingAppCoverage';;
/**
 * @export
 */
export type AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum = 'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy';;
/**
 * @export
 */
export type AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum = 'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type AppsBuildsGetToManyRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppsCiProductGetToOneRelatedFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type AppsCiProductGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type AppsCiProductGetToOneRelatedFieldsBundleIdsEnum = 'app' | 'bundleIdCapabilities' | 'identifier' | 'name' | 'platform' | 'profiles' | 'seedId';;
/**
 * @export
 */
export type AppsCiProductGetToOneRelatedIncludeEnum = 'app' | 'bundleId' | 'primaryRepositories';;
/**
 * @export
 */
export type AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = 'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE';;
/**
 * @export
 */
export type AppsCustomerReviewsGetToManyRelatedSortEnum = 'createdDate' | '-createdDate' | 'rating' | '-rating';;
/**
 * @export
 */
export type AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = 'body' | 'createdDate' | 'rating' | 'response' | 'reviewerNickname' | 'territory' | 'title';;
/**
 * @export
 */
export type AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = 'lastModifiedDate' | 'responseBody' | 'review' | 'state';;
/**
 * @export
 */
export type AppsCustomerReviewsGetToManyRelatedIncludeEnum = 'response';;
/**
 * @export
 */
export type AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = 'agreementText' | 'app' | 'territories';;
/**
 * @export
 */
export type AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum = 'IOS' | 'MAC_OS' | 'TV_OS';;
/**
 * @export
 */
export type AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum = 'versionString' | '-versionString';;
/**
 * @export
 */
export type AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = 'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString';;
/**
 * @export
 */
export type AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum = 'app' | 'compatibleVersions';;
/**
 * @export
 */
export type AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum = 'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION';;
/**
 * @export
 */
export type AppsGetCollectionFilterAppStoreVersionsPlatformEnum = 'IOS' | 'MAC_OS' | 'TV_OS';;
/**
 * @export
 */
export type AppsGetCollectionSortEnum = 'bundleId' | '-bundleId' | 'name' | '-name' | 'sku' | '-sku';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsGetCollectionIncludeEnum = 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'promotedPurchases' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'subscriptionGroups';;
/**
 * @export
 */
export type AppsGetCollectionFieldsBetaAppReviewDetailsEnum = 'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppPriceSchedulesEnum = 'app' | 'automaticPrices' | 'baseTerritory' | 'manualPrices';;
/**
 * @export
 */
export type AppsGetCollectionFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type AppsGetCollectionFieldsReviewSubmissionsEnum = 'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate';;
/**
 * @export
 */
export type AppsGetCollectionFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type AppsGetCollectionFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppAvailabilitiesEnum = 'app' | 'availableInNewTerritories' | 'availableTerritories';;
/**
 * @export
 */
export type AppsGetCollectionFieldsCustomerReviewsEnum = 'body' | 'createdDate' | 'rating' | 'response' | 'reviewerNickname' | 'territory' | 'title';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type AppsGetCollectionFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppsGetCollectionFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppClipsEnum = 'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppInfosEnum = 'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo';;
/**
 * @export
 */
export type AppsGetCollectionFieldsBetaAppLocalizationsEnum = 'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppPricePointsEnum = 'app' | 'customerPrice' | 'equalizations' | 'proceeds' | 'territory';;
/**
 * @export
 */
export type AppsGetCollectionFieldsPreReleaseVersionsEnum = 'app' | 'builds' | 'platform' | 'version';;
/**
 * @export
 */
export type AppsGetCollectionFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type AppsGetCollectionFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppPreOrdersEnum = 'app' | 'appReleaseDate' | 'preOrderAvailableDate';;
/**
 * @export
 */
export type AppsGetCollectionFieldsGameCenterEnabledVersionsEnum = 'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString';;
/**
 * @export
 */
export type AppsGetCollectionFieldsSubscriptionGracePeriodsEnum = 'duration' | 'optIn' | 'renewalType' | 'sandboxOptIn';;
/**
 * @export
 */
export type AppsGetCollectionFieldsEndUserLicenseAgreementsEnum = 'agreementText' | 'app' | 'territories';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppsGetCollectionFieldsAppCustomProductPagesEnum = 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible';;
/**
 * @export
 */
export type AppsGetCollectionFieldsPerfPowerMetricsEnum = 'deviceType' | 'metricType' | 'platform';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsGetInstanceIncludeEnum = 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'promotedPurchases' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'subscriptionGroups';;
/**
 * @export
 */
export type AppsGetInstanceFieldsBetaAppReviewDetailsEnum = 'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppPriceSchedulesEnum = 'app' | 'automaticPrices' | 'baseTerritory' | 'manualPrices';;
/**
 * @export
 */
export type AppsGetInstanceFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type AppsGetInstanceFieldsReviewSubmissionsEnum = 'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate';;
/**
 * @export
 */
export type AppsGetInstanceFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type AppsGetInstanceFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppAvailabilitiesEnum = 'app' | 'availableInNewTerritories' | 'availableTerritories';;
/**
 * @export
 */
export type AppsGetInstanceFieldsCustomerReviewsEnum = 'body' | 'createdDate' | 'rating' | 'response' | 'reviewerNickname' | 'territory' | 'title';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type AppsGetInstanceFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type AppsGetInstanceFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppClipsEnum = 'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppInfosEnum = 'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo';;
/**
 * @export
 */
export type AppsGetInstanceFieldsBetaAppLocalizationsEnum = 'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppPricePointsEnum = 'app' | 'customerPrice' | 'equalizations' | 'proceeds' | 'territory';;
/**
 * @export
 */
export type AppsGetInstanceFieldsPreReleaseVersionsEnum = 'app' | 'builds' | 'platform' | 'version';;
/**
 * @export
 */
export type AppsGetInstanceFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type AppsGetInstanceFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppPreOrdersEnum = 'app' | 'appReleaseDate' | 'preOrderAvailableDate';;
/**
 * @export
 */
export type AppsGetInstanceFieldsGameCenterEnabledVersionsEnum = 'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString';;
/**
 * @export
 */
export type AppsGetInstanceFieldsSubscriptionGracePeriodsEnum = 'duration' | 'optIn' | 'renewalType' | 'sandboxOptIn';;
/**
 * @export
 */
export type AppsGetInstanceFieldsEndUserLicenseAgreementsEnum = 'agreementText' | 'app' | 'territories';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppsGetInstanceFieldsAppCustomProductPagesEnum = 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible';;
/**
 * @export
 */
export type AppsGetInstanceFieldsPerfPowerMetricsEnum = 'deviceType' | 'metricType' | 'platform';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum = 'CONSUMABLE' | 'NON_CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum = 'MISSING_METADATA' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedSortEnum = 'inAppPurchaseType' | '-inAppPurchaseType' | 'name' | '-name';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum = 'assetDeliveryState' | 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'inAppPurchaseV2' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePricePointsEnum = 'customerPrice' | 'inAppPurchaseV2' | 'priceTier' | 'proceeds' | 'territory';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum = 'description' | 'inAppPurchaseV2' | 'locale' | 'name' | 'state';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum = 'automaticPrices' | 'baseTerritory' | 'inAppPurchase' | 'manualPrices';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum = 'fileName' | 'fileSize' | 'inAppPurchaseV2' | 'lastModifiedDate' | 'url';;
/**
 * @export
 */
export type AppsInAppPurchasesV2GetToManyRelatedIncludeEnum = 'appStoreReviewScreenshot' | 'content' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'promotedPurchase';;
/**
 * @export
 */
export type AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = 'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION';;
/**
 * @export
 */
export type AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = 'IOS';;
/**
 * @export
 */
export type AppsPreOrderGetToOneRelatedFieldsAppPreOrdersEnum = 'app' | 'appReleaseDate' | 'preOrderAvailableDate';;
/**
 * @export
 */
export type AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum = 'app' | 'builds' | 'platform' | 'version';;
/**
 * @export
 */
export type AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchaseImagesEnum = 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'promotedPurchase' | 'sourceFileChecksum' | 'state' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type AppsPromotedPurchasesGetToManyRelatedIncludeEnum = 'inAppPurchaseV2' | 'promotionImages' | 'subscription';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum = 'IOS' | 'MAC_OS' | 'TV_OS';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFilterStateEnum = 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum = 'appCustomProductPageVersion' | 'appEvent' | 'appStoreVersion' | 'appStoreVersionExperiment' | 'removed' | 'resolved' | 'reviewSubmission' | 'state';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum = 'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate';;
/**
 * @export
 */
export type AppsReviewSubmissionsGetToManyRelatedIncludeEnum = 'app' | 'appStoreVersionForReview' | 'items';;
/**
 * @export
 */
export type AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = 'duration' | 'optIn' | 'renewalType' | 'sandboxOptIn';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum = 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedSortEnum = 'referenceName' | '-referenceName';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = 'customAppName' | 'locale' | 'name' | 'state' | 'subscriptionGroup';;
/**
 * @export
 */
export type AppsSubscriptionGroupsGetToManyRelatedIncludeEnum = 'subscriptionGroupLocalizations' | 'subscriptions';;
