/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BetaAppReviewSubmissionCreateRequest, BetaAppReviewSubmissionResponse, BetaAppReviewSubmissionsResponse, BuildResponse, ErrorResponse, } from '../models';
import { BetaAppReviewSubmissionCreateRequestFromJSON, BetaAppReviewSubmissionCreateRequestToJSON, BetaAppReviewSubmissionResponseFromJSON, BetaAppReviewSubmissionResponseToJSON, BetaAppReviewSubmissionsResponseFromJSON, BetaAppReviewSubmissionsResponseToJSON, BuildResponseFromJSON, BuildResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, } from '../models';
export interface BetaAppReviewSubmissionsBuildGetToOneRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum>;
}
export interface BetaAppReviewSubmissionsCreateInstanceRequest {
    betaAppReviewSubmissionCreateRequest: BetaAppReviewSubmissionCreateRequest;
}
export interface BetaAppReviewSubmissionsGetCollectionRequest {
    filterBuild: Array<string>;
    filterBetaReviewState?: Array<BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum>;
    fieldsBetaAppReviewSubmissions?: Array<BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum>;
    limit?: number;
    include?: Array<BetaAppReviewSubmissionsGetCollectionIncludeEnum>;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum>;
}
export interface BetaAppReviewSubmissionsGetInstanceRequest {
    id: string;
    fieldsBetaAppReviewSubmissions?: Array<BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum>;
    include?: Array<BetaAppReviewSubmissionsGetInstanceIncludeEnum>;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum>;
}
/**
 *
 */
export class BetaAppReviewSubmissionsApi extends runtime.BaseAPI {
    /**
     */
    async betaAppReviewSubmissionsBuildGetToOneRelatedRaw(requestParameters: BetaAppReviewSubmissionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaAppReviewSubmissionsBuildGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaAppReviewSubmissionsBuildGetToOneRelated(requestParameters: BetaAppReviewSubmissionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.betaAppReviewSubmissionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaAppReviewSubmissionsCreateInstanceRaw(requestParameters: BetaAppReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionResponse>> {
        if (requestParameters.betaAppReviewSubmissionCreateRequest === null || requestParameters.betaAppReviewSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('betaAppReviewSubmissionCreateRequest', 'Required parameter requestParameters.betaAppReviewSubmissionCreateRequest was null or undefined when calling betaAppReviewSubmissionsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppReviewSubmissionCreateRequestToJSON(requestParameters.betaAppReviewSubmissionCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaAppReviewSubmissionsCreateInstance(requestParameters: BetaAppReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionResponse> {
        const response = await this.betaAppReviewSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaAppReviewSubmissionsGetCollectionRaw(requestParameters: BetaAppReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionsResponse>> {
        if (requestParameters.filterBuild === null || requestParameters.filterBuild === undefined) {
            throw new runtime.RequiredError('filterBuild', 'Required parameter requestParameters.filterBuild was null or undefined when calling betaAppReviewSubmissionsGetCollection.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterBetaReviewState) {
            queryParameters['filter[betaReviewState]'] = requestParameters.filterBetaReviewState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterBuild) {
            queryParameters['filter[build]'] = requestParameters.filterBuild.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaAppReviewSubmissionsGetCollection(requestParameters: BetaAppReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionsResponse> {
        const response = await this.betaAppReviewSubmissionsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaAppReviewSubmissionsGetInstanceRaw(requestParameters: BetaAppReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaAppReviewSubmissionsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaAppReviewSubmissionsGetInstance(requestParameters: BetaAppReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionResponse> {
        const response = await this.betaAppReviewSubmissionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum = 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum = 'betaReviewState' | 'build' | 'submittedDate';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetCollectionIncludeEnum = 'build';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum = 'betaReviewState' | 'build' | 'submittedDate';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetInstanceIncludeEnum = 'build';;
/**
 * @export
 */
export type BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
