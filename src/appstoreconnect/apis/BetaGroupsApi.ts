/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppResponse, BetaGroupBetaTestersLinkagesRequest, BetaGroupBetaTestersLinkagesResponse, BetaGroupBuildsLinkagesRequest, BetaGroupBuildsLinkagesResponse, BetaGroupCreateRequest, BetaGroupResponse, BetaGroupUpdateRequest, BetaGroupsResponse, BetaTestersResponse, BuildsResponse, ErrorResponse, } from '../models';
import { AppResponseFromJSON, AppResponseToJSON, BetaGroupBetaTestersLinkagesRequestFromJSON, BetaGroupBetaTestersLinkagesRequestToJSON, BetaGroupBetaTestersLinkagesResponseFromJSON, BetaGroupBetaTestersLinkagesResponseToJSON, BetaGroupBuildsLinkagesRequestFromJSON, BetaGroupBuildsLinkagesRequestToJSON, BetaGroupBuildsLinkagesResponseFromJSON, BetaGroupBuildsLinkagesResponseToJSON, BetaGroupCreateRequestFromJSON, BetaGroupCreateRequestToJSON, BetaGroupResponseFromJSON, BetaGroupResponseToJSON, BetaGroupUpdateRequestFromJSON, BetaGroupUpdateRequestToJSON, BetaGroupsResponseFromJSON, BetaGroupsResponseToJSON, BetaTestersResponseFromJSON, BetaTestersResponseToJSON, BuildsResponseFromJSON, BuildsResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, } from '../models';
export interface BetaGroupsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaGroupsAppGetToOneRelatedFieldsAppsEnum>;
}
export interface BetaGroupsBetaTestersCreateToManyRelationshipRequest {
    id: string;
    betaGroupBetaTestersLinkagesRequest: BetaGroupBetaTestersLinkagesRequest;
}
export interface BetaGroupsBetaTestersDeleteToManyRelationshipRequest {
    id: string;
    betaGroupBetaTestersLinkagesRequest: BetaGroupBetaTestersLinkagesRequest;
}
export interface BetaGroupsBetaTestersGetToManyRelatedRequest {
    id: string;
    fieldsBetaTesters?: Array<BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum>;
    limit?: number;
}
export interface BetaGroupsBetaTestersGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface BetaGroupsBuildsCreateToManyRelationshipRequest {
    id: string;
    betaGroupBuildsLinkagesRequest: BetaGroupBuildsLinkagesRequest;
}
export interface BetaGroupsBuildsDeleteToManyRelationshipRequest {
    id: string;
    betaGroupBuildsLinkagesRequest: BetaGroupBuildsLinkagesRequest;
}
export interface BetaGroupsBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}
export interface BetaGroupsBuildsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface BetaGroupsCreateInstanceRequest {
    betaGroupCreateRequest: BetaGroupCreateRequest;
}
export interface BetaGroupsDeleteInstanceRequest {
    id: string;
}
export interface BetaGroupsGetCollectionRequest {
    filterIsInternalGroup?: Array<string>;
    filterName?: Array<string>;
    filterPublicLink?: Array<string>;
    filterPublicLinkEnabled?: Array<string>;
    filterPublicLinkLimitEnabled?: Array<string>;
    filterApp?: Array<string>;
    filterBuilds?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<BetaGroupsGetCollectionSortEnum>;
    fieldsBetaGroups?: Array<BetaGroupsGetCollectionFieldsBetaGroupsEnum>;
    limit?: number;
    include?: Array<BetaGroupsGetCollectionIncludeEnum>;
    fieldsBetaTesters?: Array<BetaGroupsGetCollectionFieldsBetaTestersEnum>;
    fieldsApps?: Array<BetaGroupsGetCollectionFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaGroupsGetCollectionFieldsBuildsEnum>;
    limitBetaTesters?: number;
    limitBuilds?: number;
}
export interface BetaGroupsGetInstanceRequest {
    id: string;
    fieldsBetaGroups?: Array<BetaGroupsGetInstanceFieldsBetaGroupsEnum>;
    include?: Array<BetaGroupsGetInstanceIncludeEnum>;
    fieldsBetaTesters?: Array<BetaGroupsGetInstanceFieldsBetaTestersEnum>;
    fieldsApps?: Array<BetaGroupsGetInstanceFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaGroupsGetInstanceFieldsBuildsEnum>;
    limitBetaTesters?: number;
    limitBuilds?: number;
}
export interface BetaGroupsUpdateInstanceRequest {
    id: string;
    betaGroupUpdateRequest: BetaGroupUpdateRequest;
}
/**
 *
 */
export class BetaGroupsApi extends runtime.BaseAPI {
    /**
     */
    async betaGroupsAppGetToOneRelatedRaw(requestParameters: BetaGroupsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsAppGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsAppGetToOneRelated(requestParameters: BetaGroupsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.betaGroupsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.');
        }
        if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBetaTestersLinkagesRequest', 'Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBetaTestersLinkagesRequestToJSON(requestParameters.betaGroupBetaTestersLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async betaGroupsBetaTestersCreateToManyRelationship(requestParameters: BetaGroupsBetaTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.');
        }
        if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBetaTestersLinkagesRequest', 'Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBetaTestersLinkagesRequestToJSON(requestParameters.betaGroupBetaTestersLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async betaGroupsBetaTestersDeleteToManyRelationship(requestParameters: BetaGroupsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters: BetaGroupsBetaTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTestersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTestersResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsBetaTestersGetToManyRelated(requestParameters: BetaGroupsBetaTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTestersResponse> {
        const response = await this.betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupBetaTestersLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupBetaTestersLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsBetaTestersGetToManyRelationship(requestParameters: BetaGroupsBetaTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupBetaTestersLinkagesResponse> {
        const response = await this.betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters: BetaGroupsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.');
        }
        if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBuildsLinkagesRequest', 'Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBuildsLinkagesRequestToJSON(requestParameters.betaGroupBuildsLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async betaGroupsBuildsCreateToManyRelationship(requestParameters: BetaGroupsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters: BetaGroupsBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.');
        }
        if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBuildsLinkagesRequest', 'Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBuildsLinkagesRequestToJSON(requestParameters.betaGroupBuildsLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async betaGroupsBuildsDeleteToManyRelationship(requestParameters: BetaGroupsBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async betaGroupsBuildsGetToManyRelatedRaw(requestParameters: BetaGroupsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsBuildsGetToManyRelated(requestParameters: BetaGroupsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsResponse> {
        const response = await this.betaGroupsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsBuildsGetToManyRelationshipRaw(requestParameters: BetaGroupsBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupBuildsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupBuildsLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsBuildsGetToManyRelationship(requestParameters: BetaGroupsBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupBuildsLinkagesResponse> {
        const response = await this.betaGroupsBuildsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsCreateInstanceRaw(requestParameters: BetaGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.betaGroupCreateRequest === null || requestParameters.betaGroupCreateRequest === undefined) {
            throw new runtime.RequiredError('betaGroupCreateRequest', 'Required parameter requestParameters.betaGroupCreateRequest was null or undefined when calling betaGroupsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupCreateRequestToJSON(requestParameters.betaGroupCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsCreateInstance(requestParameters: BetaGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsDeleteInstanceRaw(requestParameters: BetaGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async betaGroupsDeleteInstance(requestParameters: BetaGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async betaGroupsGetCollectionRaw(requestParameters: BetaGroupsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupsResponse>> {
        const queryParameters: any = {};
        if (requestParameters.filterIsInternalGroup) {
            queryParameters['filter[isInternalGroup]'] = requestParameters.filterIsInternalGroup.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterPublicLink) {
            queryParameters['filter[publicLink]'] = requestParameters.filterPublicLink.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterPublicLinkEnabled) {
            queryParameters['filter[publicLinkEnabled]'] = requestParameters.filterPublicLinkEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterPublicLinkLimitEnabled) {
            queryParameters['filter[publicLinkLimitEnabled]'] = requestParameters.filterPublicLinkLimitEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitBetaTesters !== undefined) {
            queryParameters['limit[betaTesters]'] = requestParameters.limitBetaTesters;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupsResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsGetCollection(requestParameters: BetaGroupsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupsResponse> {
        const response = await this.betaGroupsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsGetInstanceRaw(requestParameters: BetaGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitBetaTesters !== undefined) {
            queryParameters['limit[betaTesters]'] = requestParameters.limitBetaTesters;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsGetInstance(requestParameters: BetaGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaGroupsUpdateInstanceRaw(requestParameters: BetaGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaGroupsUpdateInstance.');
        }
        if (requestParameters.betaGroupUpdateRequest === null || requestParameters.betaGroupUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaGroupUpdateRequest', 'Required parameter requestParameters.betaGroupUpdateRequest was null or undefined when calling betaGroupsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupUpdateRequestToJSON(requestParameters.betaGroupUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaGroupsUpdateInstance(requestParameters: BetaGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type BetaGroupsAppGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum = 'apps' | 'betaGroups' | 'builds' | 'email' | 'firstName' | 'inviteType' | 'lastName';;
/**
 * @export
 */
export type BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type BetaGroupsGetCollectionSortEnum = 'createdDate' | '-createdDate' | 'name' | '-name' | 'publicLinkEnabled' | '-publicLinkEnabled' | 'publicLinkLimit' | '-publicLinkLimit';;
/**
 * @export
 */
export type BetaGroupsGetCollectionFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type BetaGroupsGetCollectionIncludeEnum = 'app' | 'betaTesters' | 'builds';;
/**
 * @export
 */
export type BetaGroupsGetCollectionFieldsBetaTestersEnum = 'apps' | 'betaGroups' | 'builds' | 'email' | 'firstName' | 'inviteType' | 'lastName';;
/**
 * @export
 */
export type BetaGroupsGetCollectionFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type BetaGroupsGetCollectionFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type BetaGroupsGetInstanceFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type BetaGroupsGetInstanceIncludeEnum = 'app' | 'betaTesters' | 'builds';;
/**
 * @export
 */
export type BetaGroupsGetInstanceFieldsBetaTestersEnum = 'apps' | 'betaGroups' | 'builds' | 'email' | 'firstName' | 'inviteType' | 'lastName';;
/**
 * @export
 */
export type BetaGroupsGetInstanceFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type BetaGroupsGetInstanceFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
