/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppResponse, BetaLicenseAgreementResponse, BetaLicenseAgreementUpdateRequest, BetaLicenseAgreementsResponse, ErrorResponse, } from '../models';
import { AppResponseFromJSON, AppResponseToJSON, BetaLicenseAgreementResponseFromJSON, BetaLicenseAgreementResponseToJSON, BetaLicenseAgreementUpdateRequestFromJSON, BetaLicenseAgreementUpdateRequestToJSON, BetaLicenseAgreementsResponseFromJSON, BetaLicenseAgreementsResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, } from '../models';
export interface BetaLicenseAgreementsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum>;
}
export interface BetaLicenseAgreementsGetCollectionRequest {
    filterApp?: Array<string>;
    fieldsBetaLicenseAgreements?: Array<BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum>;
    limit?: number;
    include?: Array<BetaLicenseAgreementsGetCollectionIncludeEnum>;
    fieldsApps?: Array<BetaLicenseAgreementsGetCollectionFieldsAppsEnum>;
}
export interface BetaLicenseAgreementsGetInstanceRequest {
    id: string;
    fieldsBetaLicenseAgreements?: Array<BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum>;
    include?: Array<BetaLicenseAgreementsGetInstanceIncludeEnum>;
    fieldsApps?: Array<BetaLicenseAgreementsGetInstanceFieldsAppsEnum>;
}
export interface BetaLicenseAgreementsUpdateInstanceRequest {
    id: string;
    betaLicenseAgreementUpdateRequest: BetaLicenseAgreementUpdateRequest;
}
/**
 *
 */
export class BetaLicenseAgreementsApi extends runtime.BaseAPI {
    /**
     */
    async betaLicenseAgreementsAppGetToOneRelatedRaw(requestParameters: BetaLicenseAgreementsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsAppGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaLicenseAgreementsAppGetToOneRelated(requestParameters: BetaLicenseAgreementsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.betaLicenseAgreementsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaLicenseAgreementsGetCollectionRaw(requestParameters: BetaLicenseAgreementsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementsResponse>> {
        const queryParameters: any = {};
        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementsResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaLicenseAgreementsGetCollection(requestParameters: BetaLicenseAgreementsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementsResponse> {
        const response = await this.betaLicenseAgreementsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaLicenseAgreementsGetInstanceRaw(requestParameters: BetaLicenseAgreementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaLicenseAgreementsGetInstance(requestParameters: BetaLicenseAgreementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementResponse> {
        const response = await this.betaLicenseAgreementsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async betaLicenseAgreementsUpdateInstanceRaw(requestParameters: BetaLicenseAgreementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsUpdateInstance.');
        }
        if (requestParameters.betaLicenseAgreementUpdateRequest === null || requestParameters.betaLicenseAgreementUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaLicenseAgreementUpdateRequest', 'Required parameter requestParameters.betaLicenseAgreementUpdateRequest was null or undefined when calling betaLicenseAgreementsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaLicenseAgreementUpdateRequestToJSON(requestParameters.betaLicenseAgreementUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementResponseFromJSON(jsonValue));
    }
    /**
     */
    async betaLicenseAgreementsUpdateInstance(requestParameters: BetaLicenseAgreementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementResponse> {
        const response = await this.betaLicenseAgreementsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetCollectionIncludeEnum = 'app';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetCollectionFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetInstanceIncludeEnum = 'app';;
/**
 * @export
 */
export type BetaLicenseAgreementsGetInstanceFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
