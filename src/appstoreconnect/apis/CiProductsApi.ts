/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppResponse, CiBuildRunsResponse, CiProductResponse, CiProductsResponse, CiWorkflowsResponse, ErrorResponse, ScmRepositoriesResponse, } from '../models';
import { AppResponseFromJSON, AppResponseToJSON, CiBuildRunsResponseFromJSON, CiBuildRunsResponseToJSON, CiProductResponseFromJSON, CiProductResponseToJSON, CiProductsResponseFromJSON, CiProductsResponseToJSON, CiWorkflowsResponseFromJSON, CiWorkflowsResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, ScmRepositoriesResponseFromJSON, ScmRepositoriesResponseToJSON, } from '../models';
export interface CiProductsAdditionalRepositoriesGetToManyRelatedRequest {
    id: string;
    filterId?: Array<string>;
    fieldsScmGitReferences?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsScmProviders?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum>;
    fieldsScmRepositories?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum>;
}
export interface CiProductsAppGetToOneRelatedRequest {
    id: string;
    fieldsBetaLicenseAgreements?: Array<CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum>;
    fieldsBetaAppReviewDetails?: Array<CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum>;
    fieldsAppClips?: Array<CiProductsAppGetToOneRelatedFieldsAppClipsEnum>;
    fieldsBetaAppLocalizations?: Array<CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum>;
    fieldsAppInfos?: Array<CiProductsAppGetToOneRelatedFieldsAppInfosEnum>;
    fieldsPreReleaseVersions?: Array<CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum>;
    fieldsCiProducts?: Array<CiProductsAppGetToOneRelatedFieldsCiProductsEnum>;
    fieldsInAppPurchases?: Array<CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum>;
    fieldsReviewSubmissions?: Array<CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum>;
    fieldsBetaGroups?: Array<CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum>;
    fieldsAppPreOrders?: Array<CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum>;
    fieldsAppPrices?: Array<CiProductsAppGetToOneRelatedFieldsAppPricesEnum>;
    fieldsGameCenterEnabledVersions?: Array<CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum>;
    fieldsSubscriptionGracePeriods?: Array<CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum>;
    fieldsPromotedPurchases?: Array<CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum>;
    fieldsEndUserLicenseAgreements?: Array<CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum>;
    fieldsAppStoreVersions?: Array<CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppCustomProductPages?: Array<CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum>;
    fieldsApps?: Array<CiProductsAppGetToOneRelatedFieldsAppsEnum>;
    fieldsAppEvents?: Array<CiProductsAppGetToOneRelatedFieldsAppEventsEnum>;
    fieldsTerritories?: Array<CiProductsAppGetToOneRelatedFieldsTerritoriesEnum>;
    fieldsBuilds?: Array<CiProductsAppGetToOneRelatedFieldsBuildsEnum>;
    limitBetaGroups?: number;
    limitAppStoreVersions?: number;
    limitPreReleaseVersions?: number;
    limitBetaAppLocalizations?: number;
    limitBuilds?: number;
    limitAppInfos?: number;
    limitAppClips?: number;
    limitAvailableTerritories?: number;
    limitInAppPurchases?: number;
    limitSubscriptionGroups?: number;
    limitGameCenterEnabledVersions?: number;
    limitAppCustomProductPages?: number;
    limitInAppPurchasesV2?: number;
    limitPromotedPurchases?: number;
    limitAppEvents?: number;
    limitReviewSubmissions?: number;
    include?: Array<CiProductsAppGetToOneRelatedIncludeEnum>;
}
export interface CiProductsBuildRunsGetToManyRelatedRequest {
    id: string;
    filterBuilds?: Array<string>;
    fieldsScmGitReferences?: Array<CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsCiBuildRuns?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum>;
    fieldsScmPullRequests?: Array<CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum>;
    fieldsCiProducts?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum>;
    fieldsBuilds?: Array<CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
    limitBuilds?: number;
    include?: Array<CiProductsBuildRunsGetToManyRelatedIncludeEnum>;
}
export interface CiProductsDeleteInstanceRequest {
    id: string;
}
export interface CiProductsGetCollectionRequest {
    filterProductType?: Array<CiProductsGetCollectionFilterProductTypeEnum>;
    filterApp?: Array<string>;
    fieldsCiProducts?: Array<CiProductsGetCollectionFieldsCiProductsEnum>;
    limit?: number;
    include?: Array<CiProductsGetCollectionIncludeEnum>;
    fieldsCiBuildRuns?: Array<CiProductsGetCollectionFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsGetCollectionFieldsCiWorkflowsEnum>;
    fieldsApps?: Array<CiProductsGetCollectionFieldsAppsEnum>;
    fieldsScmRepositories?: Array<CiProductsGetCollectionFieldsScmRepositoriesEnum>;
    limitPrimaryRepositories?: number;
}
export interface CiProductsGetInstanceRequest {
    id: string;
    fieldsCiProducts?: Array<CiProductsGetInstanceFieldsCiProductsEnum>;
    include?: Array<CiProductsGetInstanceIncludeEnum>;
    fieldsCiBuildRuns?: Array<CiProductsGetInstanceFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsGetInstanceFieldsCiWorkflowsEnum>;
    fieldsApps?: Array<CiProductsGetInstanceFieldsAppsEnum>;
    fieldsScmRepositories?: Array<CiProductsGetInstanceFieldsScmRepositoriesEnum>;
    limitPrimaryRepositories?: number;
}
export interface CiProductsPrimaryRepositoriesGetToManyRelatedRequest {
    id: string;
    filterId?: Array<string>;
    fieldsScmGitReferences?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsScmProviders?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum>;
    fieldsScmRepositories?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum>;
}
export interface CiProductsWorkflowsGetToManyRelatedRequest {
    id: string;
    fieldsCiXcodeVersions?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum>;
    fieldsCiWorkflows?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum>;
    fieldsCiMacOsVersions?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum>;
    fieldsCiProducts?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum>;
    fieldsScmRepositories?: Array<CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsWorkflowsGetToManyRelatedIncludeEnum>;
}
/**
 *
 */
export class CiProductsApi extends runtime.BaseAPI {
    /**
     */
    async ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters: CiProductsAdditionalRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoriesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsAdditionalRepositoriesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmProviders) {
            queryParameters['fields[scmProviders]'] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/additionalRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ScmRepositoriesResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsAdditionalRepositoriesGetToManyRelated(requestParameters: CiProductsAdditionalRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoriesResponse> {
        const response = await this.ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsAppGetToOneRelatedRaw(requestParameters: CiProductsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsAppGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppPrices) {
            queryParameters['fields[appPrices]'] = requestParameters.fieldsAppPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }
        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }
        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }
        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }
        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }
        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }
        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }
        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }
        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }
        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }
        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }
        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }
        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }
        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsAppGetToOneRelated(requestParameters: CiProductsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.ciProductsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsBuildRunsGetToManyRelatedRaw(requestParameters: CiProductsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiBuildRunsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsBuildRunsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmPullRequests) {
            queryParameters['fields[scmPullRequests]'] = requestParameters.fieldsScmPullRequests.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/buildRuns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CiBuildRunsResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsBuildRunsGetToManyRelated(requestParameters: CiProductsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiBuildRunsResponse> {
        const response = await this.ciProductsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsDeleteInstanceRaw(requestParameters: CiProductsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async ciProductsDeleteInstance(requestParameters: CiProductsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ciProductsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async ciProductsGetCollectionRaw(requestParameters: CiProductsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductsResponse>> {
        const queryParameters: any = {};
        if (requestParameters.filterProductType) {
            queryParameters['filter[productType]'] = requestParameters.filterProductType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductsResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsGetCollection(requestParameters: CiProductsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductsResponse> {
        const response = await this.ciProductsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsGetInstanceRaw(requestParameters: CiProductsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsGetInstance(requestParameters: CiProductsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductResponse> {
        const response = await this.ciProductsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters: CiProductsPrimaryRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoriesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsPrimaryRepositoriesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmProviders) {
            queryParameters['fields[scmProviders]'] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/primaryRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ScmRepositoriesResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsPrimaryRepositoriesGetToManyRelated(requestParameters: CiProductsPrimaryRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoriesResponse> {
        const response = await this.ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async ciProductsWorkflowsGetToManyRelatedRaw(requestParameters: CiProductsWorkflowsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiWorkflowsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ciProductsWorkflowsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsCiXcodeVersions) {
            queryParameters['fields[ciXcodeVersions]'] = requestParameters.fieldsCiXcodeVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiMacOsVersions) {
            queryParameters['fields[ciMacOsVersions]'] = requestParameters.fieldsCiMacOsVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/workflows`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CiWorkflowsResponseFromJSON(jsonValue));
    }
    /**
     */
    async ciProductsWorkflowsGetToManyRelated(requestParameters: CiProductsWorkflowsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiWorkflowsResponse> {
        const response = await this.ciProductsWorkflowsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = 'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository';;
/**
 * @export
 */
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum = 'repositories' | 'scmProviderType' | 'url';;
/**
 * @export
 */
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum = 'defaultBranch' | 'scmProvider';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum = 'agreementText' | 'app';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum = 'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppClipsEnum = 'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum = 'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppInfosEnum = 'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum = 'app' | 'builds' | 'platform' | 'version';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum = 'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum = 'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum = 'app' | 'appReleaseDate' | 'preOrderAvailableDate';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppPricesEnum = 'app' | 'priceTier';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum = 'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = 'duration' | 'optIn' | 'renewalType' | 'sandboxOptIn';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = 'agreementText' | 'app' | 'territories';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum = 'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'customerReviews' | 'downloadable' | 'earliestReleaseDate' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'versionString';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum = 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsAppEventsEnum = 'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type CiProductsAppGetToOneRelatedIncludeEnum = 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'promotedPurchases' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'subscriptionGroups';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = 'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = 'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = 'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = 'destinationBranchName' | 'destinationRepositoryName' | 'destinationRepositoryOwner' | 'isClosed' | 'isCrossRepository' | 'number' | 'repository' | 'sourceBranchName' | 'sourceRepositoryName' | 'sourceRepositoryOwner' | 'title' | 'webUrl';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum = 'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version';;
/**
 * @export
 */
export type CiProductsBuildRunsGetToManyRelatedIncludeEnum = 'builds' | 'destinationBranch' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'workflow';;
/**
 * @export
 */
export type CiProductsGetCollectionFilterProductTypeEnum = 'APP' | 'FRAMEWORK';;
/**
 * @export
 */
export type CiProductsGetCollectionFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type CiProductsGetCollectionIncludeEnum = 'app' | 'bundleId' | 'primaryRepositories';;
/**
 * @export
 */
export type CiProductsGetCollectionFieldsCiBuildRunsEnum = 'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow';;
/**
 * @export
 */
export type CiProductsGetCollectionFieldsCiWorkflowsEnum = 'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion';;
/**
 * @export
 */
export type CiProductsGetCollectionFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type CiProductsGetCollectionFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type CiProductsGetInstanceFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type CiProductsGetInstanceIncludeEnum = 'app' | 'bundleId' | 'primaryRepositories';;
/**
 * @export
 */
export type CiProductsGetInstanceFieldsCiBuildRunsEnum = 'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow';;
/**
 * @export
 */
export type CiProductsGetInstanceFieldsCiWorkflowsEnum = 'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion';;
/**
 * @export
 */
export type CiProductsGetInstanceFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type CiProductsGetInstanceFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = 'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository';;
/**
 * @export
 */
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum = 'repositories' | 'scmProviderType' | 'url';;
/**
 * @export
 */
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum = 'defaultBranch' | 'scmProvider';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum = 'macOsVersions' | 'name' | 'testDestinations' | 'version';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum = 'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum = 'name' | 'version' | 'xcodeVersions';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum = 'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum = 'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl';;
/**
 * @export
 */
export type CiProductsWorkflowsGetToManyRelatedIncludeEnum = 'macOsVersion' | 'product' | 'repository' | 'xcodeVersion';;
