/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ErrorResponse, GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, GameCenterEnabledVersionCompatibleVersionsLinkagesResponse, GameCenterEnabledVersionsResponse, } from '../models';
import { ErrorResponseFromJSON, ErrorResponseToJSON, GameCenterEnabledVersionCompatibleVersionsLinkagesRequestFromJSON, GameCenterEnabledVersionCompatibleVersionsLinkagesRequestToJSON, GameCenterEnabledVersionCompatibleVersionsLinkagesResponseFromJSON, GameCenterEnabledVersionCompatibleVersionsLinkagesResponseToJSON, GameCenterEnabledVersionsResponseFromJSON, GameCenterEnabledVersionsResponseToJSON, } from '../models';
export interface GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest {
    id: string;
    gameCenterEnabledVersionCompatibleVersionsLinkagesRequest: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
}
export interface GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest {
    id: string;
    gameCenterEnabledVersionCompatibleVersionsLinkagesRequest: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
}
export interface GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFilterPlatformEnum>;
    filterVersionString?: Array<string>;
    filterApp?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSortEnum>;
    fieldsGameCenterEnabledVersions?: Array<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum>;
    fieldsApps?: Array<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    limitCompatibleVersions?: number;
    include?: Array<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterEnabledVersionCompatibleVersionsLinkagesRequest: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
}
/**
 *
 */
export class GameCenterEnabledVersionsApi extends runtime.BaseAPI {
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRaw(requestParameters: GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship.');
        }
        if (requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === null || requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterEnabledVersionCompatibleVersionsLinkagesRequest', 'Required parameter requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequestToJSON(requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(requestParameters: GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRaw(requestParameters: GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship.');
        }
        if (requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === null || requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterEnabledVersionCompatibleVersionsLinkagesRequest', 'Required parameter requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequestToJSON(requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(requestParameters: GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRaw(requestParameters: GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterEnabledVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterVersionString) {
            queryParameters['filter[versionString]'] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitCompatibleVersions !== undefined) {
            queryParameters['limit[compatibleVersions]'] = requestParameters.limitCompatibleVersions;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterEnabledVersions/{id}/compatibleVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterEnabledVersionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(requestParameters: GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterEnabledVersionsResponse> {
        const response = await this.gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRaw(requestParameters: GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterEnabledVersionCompatibleVersionsLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(requestParameters: GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse> {
        const response = await this.gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRaw(requestParameters: GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship.');
        }
        if (requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === null || requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterEnabledVersionCompatibleVersionsLinkagesRequest', 'Required parameter requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest was null or undefined when calling gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequestToJSON(requestParameters.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(requestParameters: GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }
}
/**
 * @export
 */
export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFilterPlatformEnum = 'IOS' | 'MAC_OS' | 'TV_OS';;
/**
 * @export
 */
export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSortEnum = 'versionString' | '-versionString';;
/**
 * @export
 */
export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = 'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString';;
/**
 * @export
 */
export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedIncludeEnum = 'app' | 'compatibleVersions';;
