/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ErrorResponse, SubscriptionGroupCreateRequest, SubscriptionGroupLocalizationsResponse, SubscriptionGroupResponse, SubscriptionGroupUpdateRequest, SubscriptionsResponse, } from '../models';
import { ErrorResponseFromJSON, ErrorResponseToJSON, SubscriptionGroupCreateRequestFromJSON, SubscriptionGroupCreateRequestToJSON, SubscriptionGroupLocalizationsResponseFromJSON, SubscriptionGroupLocalizationsResponseToJSON, SubscriptionGroupResponseFromJSON, SubscriptionGroupResponseToJSON, SubscriptionGroupUpdateRequestFromJSON, SubscriptionGroupUpdateRequestToJSON, SubscriptionsResponseFromJSON, SubscriptionsResponseToJSON, } from '../models';
export interface SubscriptionGroupsCreateInstanceRequest {
    subscriptionGroupCreateRequest: SubscriptionGroupCreateRequest;
}
export interface SubscriptionGroupsDeleteInstanceRequest {
    id: string;
}
export interface SubscriptionGroupsGetInstanceRequest {
    id: string;
    fieldsSubscriptionGroups?: Array<SubscriptionGroupsGetInstanceFieldsSubscriptionGroupsEnum>;
    include?: Array<SubscriptionGroupsGetInstanceIncludeEnum>;
    fieldsSubscriptions?: Array<SubscriptionGroupsGetInstanceFieldsSubscriptionsEnum>;
    fieldsSubscriptionGroupLocalizations?: Array<SubscriptionGroupsGetInstanceFieldsSubscriptionGroupLocalizationsEnum>;
    limitSubscriptionGroupLocalizations?: number;
    limitSubscriptions?: number;
}
export interface SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsSubscriptionGroups?: Array<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedFieldsSubscriptionGroupsEnum>;
    fieldsSubscriptionGroupLocalizations?: Array<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum>;
    limit?: number;
    include?: Array<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
    id: string;
    filterName?: Array<string>;
    filterProductId?: Array<string>;
    filterState?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFilterStateEnum>;
    sort?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedSortEnum>;
    fieldsPromotedPurchases?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsPromotedPurchasesEnum>;
    fieldsSubscriptionPromotionalOffers?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum>;
    fieldsSubscriptionOfferCodes?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionOfferCodesEnum>;
    fieldsSubscriptionAppStoreReviewScreenshots?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum>;
    fieldsSubscriptions?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionGroups?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionGroupsEnum>;
    fieldsSubscriptionIntroductoryOffers?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum>;
    fieldsSubscriptionPrices?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionPricesEnum>;
    fieldsSubscriptionLocalizations?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionLocalizationsEnum>;
    limit?: number;
    limitSubscriptionLocalizations?: number;
    limitIntroductoryOffers?: number;
    limitPromotionalOffers?: number;
    limitOfferCodes?: number;
    limitPrices?: number;
    include?: Array<SubscriptionGroupsSubscriptionsGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionGroupsUpdateInstanceRequest {
    id: string;
    subscriptionGroupUpdateRequest: SubscriptionGroupUpdateRequest;
}
/**
 *
 */
export class SubscriptionGroupsApi extends runtime.BaseAPI {
    /**
     */
    async subscriptionGroupsCreateInstanceRaw(requestParameters: SubscriptionGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupResponse>> {
        if (requestParameters.subscriptionGroupCreateRequest === null || requestParameters.subscriptionGroupCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionGroupCreateRequest', 'Required parameter requestParameters.subscriptionGroupCreateRequest was null or undefined when calling subscriptionGroupsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionGroupCreateRequestToJSON(requestParameters.subscriptionGroupCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionGroupsCreateInstance(requestParameters: SubscriptionGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupResponse> {
        const response = await this.subscriptionGroupsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionGroupsDeleteInstanceRaw(requestParameters: SubscriptionGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionGroupsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async subscriptionGroupsDeleteInstance(requestParameters: SubscriptionGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionGroupsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async subscriptionGroupsGetInstanceRaw(requestParameters: SubscriptionGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionGroupsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroupLocalizations) {
            queryParameters['fields[subscriptionGroupLocalizations]'] = requestParameters.fieldsSubscriptionGroupLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitSubscriptionGroupLocalizations !== undefined) {
            queryParameters['limit[subscriptionGroupLocalizations]'] = requestParameters.limitSubscriptionGroupLocalizations;
        }
        if (requestParameters.limitSubscriptions !== undefined) {
            queryParameters['limit[subscriptions]'] = requestParameters.limitSubscriptions;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionGroupsGetInstance(requestParameters: SubscriptionGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupResponse> {
        const response = await this.subscriptionGroupsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRaw(requestParameters: SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroupLocalizations) {
            queryParameters['fields[subscriptionGroupLocalizations]'] = requestParameters.fieldsSubscriptionGroupLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupLocalizationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(requestParameters: SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupLocalizationsResponse> {
        const response = await this.subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionGroupsSubscriptionsGetToManyRelatedRaw(requestParameters: SubscriptionGroupsSubscriptionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionGroupsSubscriptionsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterProductId) {
            queryParameters['filter[productId]'] = requestParameters.filterProductId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPromotionalOffers) {
            queryParameters['fields[subscriptionPromotionalOffers]'] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodes) {
            queryParameters['fields[subscriptionOfferCodes]'] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
            queryParameters['fields[subscriptionAppStoreReviewScreenshots]'] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
            queryParameters['fields[subscriptionIntroductoryOffers]'] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPrices) {
            queryParameters['fields[subscriptionPrices]'] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionLocalizations) {
            queryParameters['fields[subscriptionLocalizations]'] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitSubscriptionLocalizations !== undefined) {
            queryParameters['limit[subscriptionLocalizations]'] = requestParameters.limitSubscriptionLocalizations;
        }
        if (requestParameters.limitIntroductoryOffers !== undefined) {
            queryParameters['limit[introductoryOffers]'] = requestParameters.limitIntroductoryOffers;
        }
        if (requestParameters.limitPromotionalOffers !== undefined) {
            queryParameters['limit[promotionalOffers]'] = requestParameters.limitPromotionalOffers;
        }
        if (requestParameters.limitOfferCodes !== undefined) {
            queryParameters['limit[offerCodes]'] = requestParameters.limitOfferCodes;
        }
        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups/{id}/subscriptions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionGroupsSubscriptionsGetToManyRelated(requestParameters: SubscriptionGroupsSubscriptionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsResponse> {
        const response = await this.subscriptionGroupsSubscriptionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionGroupsUpdateInstanceRaw(requestParameters: SubscriptionGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionGroupsUpdateInstance.');
        }
        if (requestParameters.subscriptionGroupUpdateRequest === null || requestParameters.subscriptionGroupUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionGroupUpdateRequest', 'Required parameter requestParameters.subscriptionGroupUpdateRequest was null or undefined when calling subscriptionGroupsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionGroupUpdateRequestToJSON(requestParameters.subscriptionGroupUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionGroupsUpdateInstance(requestParameters: SubscriptionGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupResponse> {
        const response = await this.subscriptionGroupsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type SubscriptionGroupsGetInstanceFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type SubscriptionGroupsGetInstanceIncludeEnum = 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type SubscriptionGroupsGetInstanceFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionGroupsGetInstanceFieldsSubscriptionGroupLocalizationsEnum = 'customAppName' | 'locale' | 'name' | 'state' | 'subscriptionGroup';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = 'customAppName' | 'locale' | 'name' | 'state' | 'subscriptionGroup';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedIncludeEnum = 'subscriptionGroup';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFilterStateEnum = 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedSortEnum = 'name' | '-name';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = 'duration' | 'name' | 'numberOfPeriods' | 'offerCode' | 'offerMode' | 'prices' | 'subscription';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionOfferCodesEnum = 'active' | 'customCodes' | 'customerEligibilities' | 'duration' | 'name' | 'numberOfPeriods' | 'offerEligibility' | 'offerMode' | 'oneTimeUseCodes' | 'prices' | 'subscription' | 'totalNumberOfCodes';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = 'assetDeliveryState' | 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'sourceFileChecksum' | 'subscription' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionGroupsEnum = 'app' | 'referenceName' | 'subscriptionGroupLocalizations' | 'subscriptions';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = 'duration' | 'endDate' | 'numberOfPeriods' | 'offerMode' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionPricesEnum = 'preserveCurrentPrice' | 'preserved' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = 'description' | 'locale' | 'name' | 'state' | 'subscription';;
/**
 * @export
 */
export type SubscriptionGroupsSubscriptionsGetToManyRelatedIncludeEnum = 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'promotionalOffers' | 'subscriptionLocalizations';;
