/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ErrorResponse, SubscriptionPricePointResponse, SubscriptionPricePointsResponse, } from '../models';
import { ErrorResponseFromJSON, ErrorResponseToJSON, SubscriptionPricePointResponseFromJSON, SubscriptionPricePointResponseToJSON, SubscriptionPricePointsResponseFromJSON, SubscriptionPricePointsResponseToJSON, } from '../models';
export interface SubscriptionPricePointsEqualizationsGetToManyRelatedRequest {
    id: string;
    filterSubscription?: Array<string>;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionPricePointsEqualizationsGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    fieldsTerritories?: Array<SubscriptionPricePointsEqualizationsGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<SubscriptionPricePointsEqualizationsGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionPricePointsGetInstanceRequest {
    id: string;
    fieldsSubscriptionPricePoints?: Array<SubscriptionPricePointsGetInstanceFieldsSubscriptionPricePointsEnum>;
    include?: Array<SubscriptionPricePointsGetInstanceIncludeEnum>;
}
/**
 *
 */
export class SubscriptionPricePointsApi extends runtime.BaseAPI {
    /**
     */
    async subscriptionPricePointsEqualizationsGetToManyRelatedRaw(requestParameters: SubscriptionPricePointsEqualizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricePointsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionPricePointsEqualizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterSubscription) {
            queryParameters['filter[subscription]'] = requestParameters.filterSubscription.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionPricePoints/{id}/equalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricePointsResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionPricePointsEqualizationsGetToManyRelated(requestParameters: SubscriptionPricePointsEqualizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricePointsResponse> {
        const response = await this.subscriptionPricePointsEqualizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionPricePointsGetInstanceRaw(requestParameters: SubscriptionPricePointsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricePointResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionPricePointsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionPricePoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricePointResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionPricePointsGetInstance(requestParameters: SubscriptionPricePointsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricePointResponse> {
        const response = await this.subscriptionPricePointsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type SubscriptionPricePointsEqualizationsGetToManyRelatedFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionPricePointsEqualizationsGetToManyRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type SubscriptionPricePointsEqualizationsGetToManyRelatedIncludeEnum = 'territory';;
/**
 * @export
 */
export type SubscriptionPricePointsGetInstanceFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionPricePointsGetInstanceIncludeEnum = 'territory';;
