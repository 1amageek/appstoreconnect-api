/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ErrorResponse, PromotedPurchaseResponse, SubscriptionAppStoreReviewScreenshotResponse, SubscriptionCreateRequest, SubscriptionIntroductoryOffersLinkagesRequest, SubscriptionIntroductoryOffersLinkagesResponse, SubscriptionIntroductoryOffersResponse, SubscriptionLocalizationsResponse, SubscriptionOfferCodesResponse, SubscriptionPricePointsResponse, SubscriptionPricesLinkagesRequest, SubscriptionPricesLinkagesResponse, SubscriptionPricesResponse, SubscriptionPromotionalOffersResponse, SubscriptionResponse, SubscriptionUpdateRequest, } from '../models';
import { ErrorResponseFromJSON, ErrorResponseToJSON, PromotedPurchaseResponseFromJSON, PromotedPurchaseResponseToJSON, SubscriptionAppStoreReviewScreenshotResponseFromJSON, SubscriptionAppStoreReviewScreenshotResponseToJSON, SubscriptionCreateRequestFromJSON, SubscriptionCreateRequestToJSON, SubscriptionIntroductoryOffersLinkagesRequestFromJSON, SubscriptionIntroductoryOffersLinkagesRequestToJSON, SubscriptionIntroductoryOffersLinkagesResponseFromJSON, SubscriptionIntroductoryOffersLinkagesResponseToJSON, SubscriptionIntroductoryOffersResponseFromJSON, SubscriptionIntroductoryOffersResponseToJSON, SubscriptionLocalizationsResponseFromJSON, SubscriptionLocalizationsResponseToJSON, SubscriptionOfferCodesResponseFromJSON, SubscriptionOfferCodesResponseToJSON, SubscriptionPricePointsResponseFromJSON, SubscriptionPricePointsResponseToJSON, SubscriptionPricesLinkagesRequestFromJSON, SubscriptionPricesLinkagesRequestToJSON, SubscriptionPricesLinkagesResponseFromJSON, SubscriptionPricesLinkagesResponseToJSON, SubscriptionPricesResponseFromJSON, SubscriptionPricesResponseToJSON, SubscriptionPromotionalOffersResponseFromJSON, SubscriptionPromotionalOffersResponseToJSON, SubscriptionResponseFromJSON, SubscriptionResponseToJSON, SubscriptionUpdateRequestFromJSON, SubscriptionUpdateRequestToJSON, } from '../models';
export interface SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest {
    id: string;
    fieldsSubscriptionAppStoreReviewScreenshots?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum>;
    fieldsSubscriptions?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum>;
    include?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum>;
}
export interface SubscriptionsCreateInstanceRequest {
    subscriptionCreateRequest: SubscriptionCreateRequest;
}
export interface SubscriptionsDeleteInstanceRequest {
    id: string;
}
export interface SubscriptionsGetInstanceRequest {
    id: string;
    fieldsSubscriptions?: Array<SubscriptionsGetInstanceFieldsSubscriptionsEnum>;
    include?: Array<SubscriptionsGetInstanceIncludeEnum>;
    fieldsPromotedPurchases?: Array<SubscriptionsGetInstanceFieldsPromotedPurchasesEnum>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsGetInstanceFieldsSubscriptionPricePointsEnum>;
    fieldsSubscriptionPromotionalOffers?: Array<SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum>;
    fieldsSubscriptionOfferCodes?: Array<SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum>;
    fieldsSubscriptionAppStoreReviewScreenshots?: Array<SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum>;
    fieldsSubscriptionPrices?: Array<SubscriptionsGetInstanceFieldsSubscriptionPricesEnum>;
    fieldsSubscriptionIntroductoryOffers?: Array<SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum>;
    fieldsSubscriptionLocalizations?: Array<SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum>;
    limitIntroductoryOffers?: number;
    limitOfferCodes?: number;
    limitPrices?: number;
    limitPromotionalOffers?: number;
    limitSubscriptionLocalizations?: number;
}
export interface SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest {
    id: string;
    subscriptionIntroductoryOffersLinkagesRequest: SubscriptionIntroductoryOffersLinkagesRequest;
}
export interface SubscriptionsIntroductoryOffersGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    fieldsSubscriptions?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionIntroductoryOffers?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum>;
    fieldsTerritories?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsIntroductoryOffersGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface SubscriptionsOfferCodesGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionOfferCodeCustomCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum>;
    fieldsSubscriptionOfferCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum>;
    fieldsSubscriptionOfferCodeOneTimeUseCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum>;
    fieldsSubscriptions?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionOfferCodePrices?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum>;
    limit?: number;
    limitOneTimeUseCodes?: number;
    limitCustomCodes?: number;
    limitPrices?: number;
    include?: Array<SubscriptionsOfferCodesGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsPricePointsGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    fieldsTerritories?: Array<SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<SubscriptionsPricePointsGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsPricesDeleteToManyRelationshipRequest {
    id: string;
    subscriptionPricesLinkagesRequest: SubscriptionPricesLinkagesRequest;
}
export interface SubscriptionsPricesGetToManyRelatedRequest {
    id: string;
    filterSubscriptionPricePoint?: Array<string>;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    fieldsSubscriptionPrices?: Array<SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum>;
    fieldsTerritories?: Array<SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<SubscriptionsPricesGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsPricesGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface SubscriptionsPromotedPurchaseGetToOneRelatedRequest {
    id: string;
    fieldsPromotedPurchases?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum>;
    fieldsSubscriptions?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum>;
    fieldsInAppPurchases?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum>;
    fieldsPromotedPurchaseImages?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchaseImagesEnum>;
    limitPromotionImages?: number;
    include?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum>;
}
export interface SubscriptionsPromotionalOffersGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPromotionalOffers?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum>;
    fieldsSubscriptions?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionPromotionalOfferPrices?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum>;
    limit?: number;
    limitPrices?: number;
    include?: Array<SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsSubscriptions?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionLocalizations?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum>;
    limit?: number;
    include?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum>;
}
export interface SubscriptionsUpdateInstanceRequest {
    id: string;
    subscriptionUpdateRequest: SubscriptionUpdateRequest;
}
/**
 *
 */
export class SubscriptionsApi extends runtime.BaseAPI {
    /**
     */
    async subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters: SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsAppStoreReviewScreenshotGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
            queryParameters['fields[subscriptionAppStoreReviewScreenshots]'] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/appStoreReviewScreenshot`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAppStoreReviewScreenshotResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsAppStoreReviewScreenshotGetToOneRelated(requestParameters: SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAppStoreReviewScreenshotResponse> {
        const response = await this.subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsCreateInstanceRaw(requestParameters: SubscriptionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.subscriptionCreateRequest === null || requestParameters.subscriptionCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionCreateRequest', 'Required parameter requestParameters.subscriptionCreateRequest was null or undefined when calling subscriptionsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionCreateRequestToJSON(requestParameters.subscriptionCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsCreateInstance(requestParameters: SubscriptionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsDeleteInstanceRaw(requestParameters: SubscriptionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async subscriptionsDeleteInstance(requestParameters: SubscriptionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async subscriptionsGetInstanceRaw(requestParameters: SubscriptionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPromotionalOffers) {
            queryParameters['fields[subscriptionPromotionalOffers]'] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodes) {
            queryParameters['fields[subscriptionOfferCodes]'] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
            queryParameters['fields[subscriptionAppStoreReviewScreenshots]'] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPrices) {
            queryParameters['fields[subscriptionPrices]'] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
            queryParameters['fields[subscriptionIntroductoryOffers]'] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionLocalizations) {
            queryParameters['fields[subscriptionLocalizations]'] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitIntroductoryOffers !== undefined) {
            queryParameters['limit[introductoryOffers]'] = requestParameters.limitIntroductoryOffers;
        }
        if (requestParameters.limitOfferCodes !== undefined) {
            queryParameters['limit[offerCodes]'] = requestParameters.limitOfferCodes;
        }
        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }
        if (requestParameters.limitPromotionalOffers !== undefined) {
            queryParameters['limit[promotionalOffers]'] = requestParameters.limitPromotionalOffers;
        }
        if (requestParameters.limitSubscriptionLocalizations !== undefined) {
            queryParameters['limit[subscriptionLocalizations]'] = requestParameters.limitSubscriptionLocalizations;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsGetInstance(requestParameters: SubscriptionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters: SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.');
        }
        if (requestParameters.subscriptionIntroductoryOffersLinkagesRequest === null || requestParameters.subscriptionIntroductoryOffersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('subscriptionIntroductoryOffersLinkagesRequest', 'Required parameter requestParameters.subscriptionIntroductoryOffersLinkagesRequest was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionIntroductoryOffersLinkagesRequestToJSON(requestParameters.subscriptionIntroductoryOffersLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async subscriptionsIntroductoryOffersDeleteToManyRelationship(requestParameters: SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOffersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
            queryParameters['fields[subscriptionIntroductoryOffers]'] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOffersResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelated(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOffersResponse> {
        const response = await this.subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOffersLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelationship(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOffersLinkagesResponse> {
        const response = await this.subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters: SubscriptionsOfferCodesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsOfferCodesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodeCustomCodes) {
            queryParameters['fields[subscriptionOfferCodeCustomCodes]'] = requestParameters.fieldsSubscriptionOfferCodeCustomCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodes) {
            queryParameters['fields[subscriptionOfferCodes]'] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes) {
            queryParameters['fields[subscriptionOfferCodeOneTimeUseCodes]'] = requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionOfferCodePrices) {
            queryParameters['fields[subscriptionOfferCodePrices]'] = requestParameters.fieldsSubscriptionOfferCodePrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitOneTimeUseCodes !== undefined) {
            queryParameters['limit[oneTimeUseCodes]'] = requestParameters.limitOneTimeUseCodes;
        }
        if (requestParameters.limitCustomCodes !== undefined) {
            queryParameters['limit[customCodes]'] = requestParameters.limitCustomCodes;
        }
        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/offerCodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodesResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsOfferCodesGetToManyRelated(requestParameters: SubscriptionsOfferCodesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodesResponse> {
        const response = await this.subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsPricePointsGetToManyRelatedRaw(requestParameters: SubscriptionsPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricePointsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPricePointsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/pricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricePointsResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsPricePointsGetToManyRelated(requestParameters: SubscriptionsPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricePointsResponse> {
        const response = await this.subscriptionsPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters: SubscriptionsPricesDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.');
        }
        if (requestParameters.subscriptionPricesLinkagesRequest === null || requestParameters.subscriptionPricesLinkagesRequest === undefined) {
            throw new runtime.RequiredError('subscriptionPricesLinkagesRequest', 'Required parameter requestParameters.subscriptionPricesLinkagesRequest was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionPricesLinkagesRequestToJSON(requestParameters.subscriptionPricesLinkagesRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async subscriptionsPricesDeleteToManyRelationship(requestParameters: SubscriptionsPricesDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }
    /**
     */
    async subscriptionsPricesGetToManyRelatedRaw(requestParameters: SubscriptionsPricesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterSubscriptionPricePoint) {
            queryParameters['filter[subscriptionPricePoint]'] = requestParameters.filterSubscriptionPricePoint.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPrices) {
            queryParameters['fields[subscriptionPrices]'] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricesResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsPricesGetToManyRelated(requestParameters: SubscriptionsPricesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricesResponse> {
        const response = await this.subscriptionsPricesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsPricesGetToManyRelationshipRaw(requestParameters: SubscriptionsPricesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricesLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelationship.');
        }
        const queryParameters: any = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricesLinkagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsPricesGetToManyRelationship(requestParameters: SubscriptionsPricesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricesLinkagesResponse> {
        const response = await this.subscriptionsPricesGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters: SubscriptionsPromotedPurchaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotedPurchaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotedPurchaseGetToOneRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsPromotedPurchaseImages) {
            queryParameters['fields[promotedPurchaseImages]'] = requestParameters.fieldsPromotedPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitPromotionImages !== undefined) {
            queryParameters['limit[promotionImages]'] = requestParameters.limitPromotionImages;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/promotedPurchase`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => PromotedPurchaseResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsPromotedPurchaseGetToOneRelated(requestParameters: SubscriptionsPromotedPurchaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotedPurchaseResponse> {
        const response = await this.subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters: SubscriptionsPromotionalOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPromotionalOffersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotionalOffersGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPromotionalOffers) {
            queryParameters['fields[subscriptionPromotionalOffers]'] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionPromotionalOfferPrices) {
            queryParameters['fields[subscriptionPromotionalOfferPrices]'] = requestParameters.fieldsSubscriptionPromotionalOfferPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/promotionalOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPromotionalOffersResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsPromotionalOffersGetToManyRelated(requestParameters: SubscriptionsPromotionalOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPromotionalOffersResponse> {
        const response = await this.subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters: SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsSubscriptionLocalizationsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsSubscriptionLocalizations) {
            queryParameters['fields[subscriptionLocalizations]'] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/subscriptionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionLocalizationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsSubscriptionLocalizationsGetToManyRelated(requestParameters: SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLocalizationsResponse> {
        const response = await this.subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async subscriptionsUpdateInstanceRaw(requestParameters: SubscriptionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling subscriptionsUpdateInstance.');
        }
        if (requestParameters.subscriptionUpdateRequest === null || requestParameters.subscriptionUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionUpdateRequest', 'Required parameter requestParameters.subscriptionUpdateRequest was null or undefined when calling subscriptionsUpdateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionUpdateRequestToJSON(requestParameters.subscriptionUpdateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }
    /**
     */
    async subscriptionsUpdateInstance(requestParameters: SubscriptionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = 'assetDeliveryState' | 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'sourceFileChecksum' | 'subscription' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum = 'subscription';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsGetInstanceIncludeEnum = 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'promotionalOffers' | 'subscriptionLocalizations';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum = 'duration' | 'name' | 'numberOfPeriods' | 'offerCode' | 'offerMode' | 'prices' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum = 'active' | 'customCodes' | 'customerEligibilities' | 'duration' | 'name' | 'numberOfPeriods' | 'offerEligibility' | 'offerMode' | 'oneTimeUseCodes' | 'prices' | 'subscription' | 'totalNumberOfCodes';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum = 'assetDeliveryState' | 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'sourceFileChecksum' | 'subscription' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionPricesEnum = 'preserveCurrentPrice' | 'preserved' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum = 'duration' | 'endDate' | 'numberOfPeriods' | 'offerMode' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum = 'description' | 'locale' | 'name' | 'state' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = 'duration' | 'endDate' | 'numberOfPeriods' | 'offerMode' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum = 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum = 'active' | 'createdDate' | 'customCode' | 'expirationDate' | 'numberOfCodes' | 'offerCode';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum = 'active' | 'customCodes' | 'customerEligibilities' | 'duration' | 'name' | 'numberOfPeriods' | 'offerEligibility' | 'offerMode' | 'oneTimeUseCodes' | 'prices' | 'subscription' | 'totalNumberOfCodes';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = 'active' | 'createdDate' | 'expirationDate' | 'numberOfCodes' | 'offerCode' | 'values';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum = 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsOfferCodesGetToManyRelatedIncludeEnum = 'customCodes' | 'oneTimeUseCodes' | 'prices' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type SubscriptionsPricePointsGetToManyRelatedIncludeEnum = 'territory';;
/**
 * @export
 */
export type SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum = 'customerPrice' | 'equalizations' | 'proceeds' | 'proceedsYear2' | 'subscription' | 'territory';;
/**
 * @export
 */
export type SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum = 'preserveCurrentPrice' | 'preserved' | 'startDate' | 'subscription' | 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum = 'currency';;
/**
 * @export
 */
export type SubscriptionsPricesGetToManyRelatedIncludeEnum = 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum = 'app' | 'enabled' | 'inAppPurchaseV2' | 'promotionImages' | 'state' | 'subscription' | 'visibleForAllUsers';;
/**
 * @export
 */
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum = 'app' | 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'content' | 'contentHosting' | 'familySharable' | 'iapPriceSchedule' | 'inAppPurchaseLocalizations' | 'inAppPurchaseType' | 'name' | 'pricePoints' | 'productId' | 'promotedPurchase' | 'reviewNote' | 'state';;
/**
 * @export
 */
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchaseImagesEnum = 'assetToken' | 'assetType' | 'fileName' | 'fileSize' | 'imageAsset' | 'promotedPurchase' | 'sourceFileChecksum' | 'state' | 'uploadOperations' | 'uploaded';;
/**
 * @export
 */
export type SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum = 'inAppPurchaseV2' | 'promotionImages' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = 'duration' | 'name' | 'numberOfPeriods' | 'offerCode' | 'offerMode' | 'prices' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum = 'subscriptionPricePoint' | 'territory';;
/**
 * @export
 */
export type SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum = 'prices' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum = 'appStoreReviewScreenshot' | 'availableInAllTerritories' | 'familySharable' | 'group' | 'groupLevel' | 'introductoryOffers' | 'name' | 'offerCodes' | 'pricePoints' | 'prices' | 'productId' | 'promotedPurchase' | 'promotionalOffers' | 'reviewNote' | 'state' | 'subscriptionLocalizations' | 'subscriptionPeriod';;
/**
 * @export
 */
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = 'description' | 'locale' | 'name' | 'state' | 'subscription';;
/**
 * @export
 */
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum = 'subscription';;
