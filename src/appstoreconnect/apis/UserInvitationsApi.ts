/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AppsResponse, ErrorResponse, UserInvitationCreateRequest, UserInvitationResponse, UserInvitationsResponse, } from '../models';
import { AppsResponseFromJSON, AppsResponseToJSON, ErrorResponseFromJSON, ErrorResponseToJSON, UserInvitationCreateRequestFromJSON, UserInvitationCreateRequestToJSON, UserInvitationResponseFromJSON, UserInvitationResponseToJSON, UserInvitationsResponseFromJSON, UserInvitationsResponseToJSON, } from '../models';
export interface UserInvitationsCreateInstanceRequest {
    userInvitationCreateRequest: UserInvitationCreateRequest;
}
export interface UserInvitationsDeleteInstanceRequest {
    id: string;
}
export interface UserInvitationsGetCollectionRequest {
    filterEmail?: Array<string>;
    filterRoles?: Array<UserInvitationsGetCollectionFilterRolesEnum>;
    filterVisibleApps?: Array<string>;
    sort?: Array<UserInvitationsGetCollectionSortEnum>;
    fieldsUserInvitations?: Array<UserInvitationsGetCollectionFieldsUserInvitationsEnum>;
    limit?: number;
    include?: Array<UserInvitationsGetCollectionIncludeEnum>;
    fieldsApps?: Array<UserInvitationsGetCollectionFieldsAppsEnum>;
    limitVisibleApps?: number;
}
export interface UserInvitationsGetInstanceRequest {
    id: string;
    fieldsUserInvitations?: Array<UserInvitationsGetInstanceFieldsUserInvitationsEnum>;
    include?: Array<UserInvitationsGetInstanceIncludeEnum>;
    fieldsApps?: Array<UserInvitationsGetInstanceFieldsAppsEnum>;
    limitVisibleApps?: number;
}
export interface UserInvitationsVisibleAppsGetToManyRelatedRequest {
    id: string;
    fieldsApps?: Array<UserInvitationsVisibleAppsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
}
/**
 *
 */
export class UserInvitationsApi extends runtime.BaseAPI {
    /**
     */
    async userInvitationsCreateInstanceRaw(requestParameters: UserInvitationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInvitationResponse>> {
        if (requestParameters.userInvitationCreateRequest === null || requestParameters.userInvitationCreateRequest === undefined) {
            throw new runtime.RequiredError('userInvitationCreateRequest', 'Required parameter requestParameters.userInvitationCreateRequest was null or undefined when calling userInvitationsCreateInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/userInvitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInvitationCreateRequestToJSON(requestParameters.userInvitationCreateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserInvitationResponseFromJSON(jsonValue));
    }
    /**
     */
    async userInvitationsCreateInstance(requestParameters: UserInvitationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInvitationResponse> {
        const response = await this.userInvitationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async userInvitationsDeleteInstanceRaw(requestParameters: UserInvitationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling userInvitationsDeleteInstance.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/userInvitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async userInvitationsDeleteInstance(requestParameters: UserInvitationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userInvitationsDeleteInstanceRaw(requestParameters, initOverrides);
    }
    /**
     */
    async userInvitationsGetCollectionRaw(requestParameters: UserInvitationsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInvitationsResponse>> {
        const queryParameters: any = {};
        if (requestParameters.filterEmail) {
            queryParameters['filter[email]'] = requestParameters.filterEmail.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterRoles) {
            queryParameters['filter[roles]'] = requestParameters.filterRoles.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.filterVisibleApps) {
            queryParameters['filter[visibleApps]'] = requestParameters.filterVisibleApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsUserInvitations) {
            queryParameters['fields[userInvitations]'] = requestParameters.fieldsUserInvitations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitVisibleApps !== undefined) {
            queryParameters['limit[visibleApps]'] = requestParameters.limitVisibleApps;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/userInvitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserInvitationsResponseFromJSON(jsonValue));
    }
    /**
     */
    async userInvitationsGetCollection(requestParameters: UserInvitationsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInvitationsResponse> {
        const response = await this.userInvitationsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async userInvitationsGetInstanceRaw(requestParameters: UserInvitationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInvitationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling userInvitationsGetInstance.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsUserInvitations) {
            queryParameters['fields[userInvitations]'] = requestParameters.fieldsUserInvitations.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limitVisibleApps !== undefined) {
            queryParameters['limit[visibleApps]'] = requestParameters.limitVisibleApps;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/userInvitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserInvitationResponseFromJSON(jsonValue));
    }
    /**
     */
    async userInvitationsGetInstance(requestParameters: UserInvitationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInvitationResponse> {
        const response = await this.userInvitationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async userInvitationsVisibleAppsGetToManyRelatedRaw(requestParameters: UserInvitationsVisibleAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling userInvitationsVisibleAppsGetToManyRelated.');
        }
        const queryParameters: any = {};
        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itcBearerToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/userInvitations/{id}/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AppsResponseFromJSON(jsonValue));
    }
    /**
     */
    async userInvitationsVisibleAppsGetToManyRelated(requestParameters: UserInvitationsVisibleAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsResponse> {
        const response = await this.userInvitationsVisibleAppsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export type UserInvitationsGetCollectionFilterRolesEnum = 'ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'IMAGE_MANAGER' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION';;
/**
 * @export
 */
export type UserInvitationsGetCollectionSortEnum = 'email' | '-email' | 'lastName' | '-lastName';;
/**
 * @export
 */
export type UserInvitationsGetCollectionFieldsUserInvitationsEnum = 'allAppsVisible' | 'email' | 'expirationDate' | 'firstName' | 'lastName' | 'provisioningAllowed' | 'roles' | 'visibleApps';;
/**
 * @export
 */
export type UserInvitationsGetCollectionIncludeEnum = 'visibleApps';;
/**
 * @export
 */
export type UserInvitationsGetCollectionFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type UserInvitationsGetInstanceFieldsUserInvitationsEnum = 'allAppsVisible' | 'email' | 'expirationDate' | 'firstName' | 'lastName' | 'provisioningAllowed' | 'roles' | 'visibleApps';;
/**
 * @export
 */
export type UserInvitationsGetInstanceIncludeEnum = 'visibleApps';;
/**
 * @export
 */
export type UserInvitationsGetInstanceFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
/**
 * @export
 */
export type UserInvitationsVisibleAppsGetToManyRelatedFieldsAppsEnum = 'appAvailability' | 'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appPricePoints' | 'appPriceSchedule' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'customerReviews' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'inAppPurchasesV2' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'promotedPurchases' | 'reviewSubmissions' | 'sku' | 'subscriptionGracePeriod' | 'subscriptionGroups' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox';;
